{
  "address": "0xa3D6c02c43A329b518E35dF988b8aaC1c14C6347",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract WhitePaperInterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a5aa843bd3bc3c71b3cfcaf9a7523394c77eadd3298e1d25e75048d2b7a1302",
  "receipt": {
    "to": null,
    "from": "0x2Ce1d0ffD7E869D9DF33e28552b12DdDed326706",
    "contractAddress": "0xa3D6c02c43A329b518E35dF988b8aaC1c14C6347",
    "transactionIndex": 0,
    "gasUsed": "335668",
    "logsBloom": "0x
    "blockHash": "0xe9f019c577d50066b3b03cae0b1af033cef7a053ebaf87b3b6cb85d09e5bc6d0",
    "transactionHash": "0x3a5aa843bd3bc3c71b3cfcaf9a7523394c77eadd3298e1d25e75048d2b7a1302",
    "logs": [],
    "blockNumber": 23667980,
    "cumulativeGasUsed": "335668",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1b77da75230ccb3c5a69b8cee3cb3e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract WhitePaperInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factories/WhitePaperInterestRateModelFactory.sol\":\"WhitePaperInterestRateModelFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Factories/WhitePaperInterestRateModelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"../WhitePaperInterestRateModel.sol\\\";\\n\\ncontract WhitePaperInterestRateModelFactory {\\n  function deploy(\\n    uint256 baseRatePerYear, \\n    uint256 multiplierPerYear\\n  ) external returns (WhitePaperInterestRateModel) {\\n    WhitePaperInterestRateModel rate = new WhitePaperInterestRateModel(\\n      baseRatePerYear,\\n      multiplierPerYear\\n    );\\n\\n    return rate;\\n  }\\n}\",\"keccak256\":\"0x56fa44b7ceb6bce86c620aac0121f4705c00bc9dc7a5a625d18f38cca7e34b7d\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x470821c8ff2120381ead6f54dba5c7b4fc0209682062bde51ea20291176aa0be\",\"license\":\"BSD-3-Clause\"},\"contracts/WhitePaperInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n  * @title Compound's WhitePaperInterestRateModel Contract\\n  * @author Compound\\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\\n  */\\ncontract WhitePaperInterestRateModel is InterestRateModel {\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock);\\n\\n    uint256 private constant BASE = 1e18;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint public constant blocksPerYear = 2102400;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint public baseRatePerBlock;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     */\\n    constructor(uint baseRatePerYear, uint multiplierPerYear) public {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n        multiplierPerBlock = multiplierPerYear / blocksPerYear;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, BASE]\\n     */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows * BASE / (cash + borrows - reserves);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) override public view returns (uint) {\\n        uint ur = utilizationRate(cash, borrows, reserves);\\n        return (ur * multiplierPerBlock / BASE) + baseRatePerBlock;\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) override public view returns (uint) {\\n        uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n        uint borrowRate = getBorrowRate(cash, borrows, reserves);\\n        uint rateToPool = borrowRate * oneMinusReserveFactor / BASE;\\n        return utilizationRate(cash, borrows, reserves) * rateToPool / BASE;\\n    }\\n}\\n\",\"keccak256\":\"0x46c9d3ee85dc9a98f39694bb0b12981155f176300d1b7742cce59f296588e197\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061051f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635e79bb6014610030575b600080fd5b61004361003e3660046100ad565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100a0565b9182526020820152604001604051809103906000f080158015610097573d6000803e3d6000fd5b50949350505050565b61041a806100d083390190565b600080604083850312156100c057600080fd5b5050803592602090910135915056fe608060405234801561001057600080fd5b5060405161041a38038061041a83398101604081905261002f91610099565b61003c62201480836100bd565b60015561004c62201480826100bd565b60008190556001546040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec279261008a928252602082015260400190565b60405180910390a150506100df565b600080604083850312156100ac57600080fd5b505080516020909101519092909150565b6000826100da57634e487b7160e01b600052601260045260246000fd5b500490565b61032c806100ee6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d3578063a385fb96146100dc578063b8168816146100e6578063f14039de146100f957600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610212565b610102565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610212565b61014b565b61009560005481565b6100956220148081565b6100956100f436600461023e565b610196565b61009560015481565b60008061011085858561014b565b9050600154670de0b6b3a76400006000548361012c9190610286565b61013691906102a5565b61014091906102c7565b9150505b9392505050565b60008260000361015d57506000610144565b8161016884866102c7565b61017291906102df565b610184670de0b6b3a764000085610286565b61018e91906102a5565b949350505050565b6000806101ab83670de0b6b3a76400006102df565b905060006101ba878787610102565b90506000670de0b6b3a76400006101d18484610286565b6101db91906102a5565b9050670de0b6b3a7640000816101f28a8a8a61014b565b6101fc9190610286565b61020691906102a5565b98975050505050505050565b60008060006060848603121561022757600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561025457600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156102a0576102a0610270565b500290565b6000826102c257634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156102da576102da610270565b500190565b6000828210156102f1576102f1610270565b50039056fea2646970667358221220fed66bd5948a0ecc111f20d647d516fa8577c08c983726db4a85c1977c5a540f64736f6c634300080d0033a2646970667358221220d6266f95e1830c8cb778dec02fe5b888b8cc8394f5f42779979c41e689331fd664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80635e79bb6014610030575b600080fd5b61004361003e3660046100ad565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100a0565b9182526020820152604001604051809103906000f080158015610097573d6000803e3d6000fd5b50949350505050565b61041a806100d083390190565b600080604083850312156100c057600080fd5b5050803592602090910135915056fe608060405234801561001057600080fd5b5060405161041a38038061041a83398101604081905261002f91610099565b61003c62201480836100bd565b60015561004c62201480826100bd565b60008190556001546040517ff35fa19c15e9ba782633a5df62a98b20217151addc68e3ff2cd623a48d37ec279261008a928252602082015260400190565b60405180910390a150506100df565b600080604083850312156100ac57600080fd5b505080516020909101519092909150565b6000826100da57634e487b7160e01b600052601260045260246000fd5b500490565b61032c806100ee6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638726bb891161005b5780638726bb89146100d3578063a385fb96146100dc578063b8168816146100e6578063f14039de146100f957600080fd5b806315f24053146100825780632191f92a146100a85780636e71e2d8146100c0575b600080fd5b610095610090366004610212565b610102565b6040519081526020015b60405180910390f35b6100b0600181565b604051901515815260200161009f565b6100956100ce366004610212565b61014b565b61009560005481565b6100956220148081565b6100956100f436600461023e565b610196565b61009560015481565b60008061011085858561014b565b9050600154670de0b6b3a76400006000548361012c9190610286565b61013691906102a5565b61014091906102c7565b9150505b9392505050565b60008260000361015d57506000610144565b8161016884866102c7565b61017291906102df565b610184670de0b6b3a764000085610286565b61018e91906102a5565b949350505050565b6000806101ab83670de0b6b3a76400006102df565b905060006101ba878787610102565b90506000670de0b6b3a76400006101d18484610286565b6101db91906102a5565b9050670de0b6b3a7640000816101f28a8a8a61014b565b6101fc9190610286565b61020691906102a5565b98975050505050505050565b60008060006060848603121561022757600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561025457600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156102a0576102a0610270565b500290565b6000826102c257634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156102da576102da610270565b500190565b6000828210156102f1576102f1610270565b50039056fea2646970667358221220fed66bd5948a0ecc111f20d647d516fa8577c08c983726db4a85c1977c5a540f64736f6c634300080d0033a2646970667358221220d6266f95e1830c8cb778dec02fe5b888b8cc8394f5f42779979c41e689331fd664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}