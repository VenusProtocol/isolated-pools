{
  "address": "0x309004d656071754509a97de0E36774DCe514e65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract JumpRateModelV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc111aa5ade38878302addd87076c28916909654ff0f758c63dffac4770bca8e5",
  "receipt": {
    "to": null,
    "from": "0x2Ce1d0ffD7E869D9DF33e28552b12DdDed326706",
    "contractAddress": "0x309004d656071754509a97de0E36774DCe514e65",
    "transactionIndex": 1,
    "gasUsed": "525238",
    "logsBloom": "0x
    "blockHash": "0xed9274dfe30fb1bcc301ac7abc30c1e4058f24d37bba3aa786a0fdde378c79d3",
    "transactionHash": "0xc111aa5ade38878302addd87076c28916909654ff0f758c63dffac4770bca8e5",
    "logs": [],
    "blockNumber": 23667977,
    "cumulativeGasUsed": "576512",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1b77da75230ccb3c5a69b8cee3cb3e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract JumpRateModelV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factories/JumpRateModelFactory.sol\":\"JumpRateModelFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n  * @title Logic for Compound's JumpRateModel Contract V2.\\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n  */\\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\\n\\n    uint256 private constant BASE = 1e18;\\n\\n    /**\\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint public constant blocksPerYear = 2102400;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint public kink;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n     */\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) internal {\\n        owner = owner_;\\n\\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) virtual external {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, BASE]\\n     */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows * BASE / (cash + borrows - reserves);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\n        uint util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n        } else {\\n            uint normalRate = ((kink * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n            uint excessUtil = util - kink;\\n            return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual override public view returns (uint) {\\n        uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint rateToPool = borrowRate * oneMinusReserveFactor / BASE;\\n        return utilizationRate(cash, borrows, reserves) * rateToPool / BASE;\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n        multiplierPerBlock = (multiplierPerYear * BASE) / (blocksPerYear * kink_);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\",\"keccak256\":\"0x43b072466779cd905c8ca6541f38017ab55956f80896e4ca49da904f79302ad2\",\"license\":\"BSD-3-Clause\"},\"contracts/Factories/JumpRateModelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"../JumpRateModelV2.sol\\\";\\n\\ncontract JumpRateModelFactory {\\n  function deploy(\\n    uint256 baseRatePerYear, \\n    uint256 multiplierPerYear, \\n    uint256 jumpMultiplierPerYear, \\n    uint256 kink_, \\n    address owner_\\n  ) external returns (JumpRateModelV2) {\\n    JumpRateModelV2 rate = new JumpRateModelV2(\\n      baseRatePerYear,\\n      multiplierPerYear,\\n      jumpMultiplierPerYear,\\n      kink_,\\n      owner_\\n    );\\n\\n    return rate;\\n  }\\n}\",\"keccak256\":\"0x2e11f7ea383cf468b13ab6fd1a00e307ae738f21ee4ccc9d91b1446ff3011e3b\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x470821c8ff2120381ead6f54dba5c7b4fc0209682062bde51ea20291176aa0be\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n\\n/**\\n  * @title Compound's JumpRateModel Contract V2 for V2 vTokens\\n  * @author Arr00\\n  * @notice Supports only for V2 vTokens\\n  */\\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {\\n\\n\\t/**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) override external view returns (uint) {\\n        return getBorrowRateInternal(cash, borrows, reserves);\\n    }\\n\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\\n\\n    BaseJumpRateModelV2(baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\\n}\\n\",\"keccak256\":\"0xa787ffd0c29de4e34bf21b057b8a60af8eb5ce9c265178b5bcb3b0941f58720e\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061088d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b61072d8061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b5060405161072d38038061072d83398101604081905261002f91610112565b600080546001600160a01b0319166001600160a01b038316179055848484848461005b8585858561006a565b505050505050505050506101bc565b610077622014808561016d565b600255610087816220148061018f565b610099670de0b6b3a76400008561018f565b6100a3919061016d565b6001556100b3622014808361016d565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561012a57600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b038116811461015f57600080fd5b809150509295509295909350565b60008261018a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156101b757634e487b7160e01b600052601160045260246000fd5b500290565b610562806101cb6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610448565b610180565b6040519081526020015b60405180910390f35b6100e76100e2366004610474565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610448565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c1610160366004610474565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b610210848484846103a0565b50505050565b60008260000361022857506000610190565b8161023384866104bc565b61023d91906104d4565b61024f670de0b6b3a7640000856104eb565b61018d919061050a565b60008061026e83670de0b6b3a76400006104d4565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104eb565b61029e919061050a565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104eb565b6102c9919061050a565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104eb565b610312919061050a565b61031c91906104bc565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104eb565b61034c919061050a565b61035691906104bc565b905060006004548361036891906104d4565b905081670de0b6b3a76400006003548361038291906104eb565b61038c919061050a565b61039691906104bc565b9350505050610190565b6103ad622014808561050a565b6002556103bd81622014806104eb565b6103cf670de0b6b3a7640000856104eb565b6103d9919061050a565b6001556103e9622014808361050a565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045d57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156104cf576104cf6104a6565b500190565b6000828210156104e6576104e66104a6565b500390565b6000816000190483118215151615610505576105056104a6565b500290565b60008261052757634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122020890843191959b3c9f9b0f0a678a2c7dfa3a4cedb0be088a083352b038316d264736f6c634300080d0033a264697066735822122064fd26d149df8cafa83c9f64e1bcf7548de0347527b73616eddfb414a8fcce8564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b61072d8061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b5060405161072d38038061072d83398101604081905261002f91610112565b600080546001600160a01b0319166001600160a01b038316179055848484848461005b8585858561006a565b505050505050505050506101bc565b610077622014808561016d565b600255610087816220148061018f565b610099670de0b6b3a76400008561018f565b6100a3919061016d565b6001556100b3622014808361016d565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561012a57600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b038116811461015f57600080fd5b809150509295509295909350565b60008261018a57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156101b757634e487b7160e01b600052601160045260246000fd5b500290565b610562806101cb6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc366004610448565b610180565b6040519081526020015b60405180910390f35b6100e76100e2366004610474565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f366004610448565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c1610160366004610474565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b610210848484846103a0565b50505050565b60008260000361022857506000610190565b8161023384866104bc565b61023d91906104d4565b61024f670de0b6b3a7640000856104eb565b61018d919061050a565b60008061026e83670de0b6b3a76400006104d4565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104eb565b61029e919061050a565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104eb565b6102c9919061050a565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104eb565b610312919061050a565b61031c91906104bc565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104eb565b61034c919061050a565b61035691906104bc565b905060006004548361036891906104d4565b905081670de0b6b3a76400006003548361038291906104eb565b61038c919061050a565b61039691906104bc565b9350505050610190565b6103ad622014808561050a565b6002556103bd81622014806104eb565b6103cf670de0b6b3a7640000856104eb565b6103d9919061050a565b6001556103e9622014808361050a565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045d57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048a57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156104cf576104cf6104a6565b500190565b6000828210156104e6576104e66104a6565b500390565b6000816000190483118215151615610505576105056104a6565b500290565b60008261052757634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122020890843191959b3c9f9b0f0a678a2c7dfa3a4cedb0be088a083352b038316d264736f6c634300080d0033a264697066735822122064fd26d149df8cafa83c9f64e1bcf7548de0347527b73616eddfb414a8fcce8564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}