{
  "address": "0xb7C5A751CCa00b11AF3CA4A35e9e992f0f9c9c9c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpMultiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        }
      ],
      "name": "updateJumpRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xedf3b054dcf4919fb405fb850c06ec3b3cd9c715db095643df750c548160f3af",
  "receipt": {
    "to": null,
    "from": "0x03862dFa5D0be8F64509C001cb8C6188194469DF",
    "contractAddress": "0xb7C5A751CCa00b11AF3CA4A35e9e992f0f9c9c9c",
    "transactionIndex": 0,
    "gasUsed": "554524",
    "logsBloom": "0x
    "blockHash": "0x902eac2d68c8eaadda9ad70a654ec5b7723e0b275d30eac146ca0769bc06e22c",
    "transactionHash": "0xedf3b054dcf4919fb405fb850c06ec3b3cd9c715db095643df750c548160f3af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 34736953,
        "transactionHash": "0xedf3b054dcf4919fb405fb850c06ec3b3cd9c715db095643df750c548160f3af",
        "address": "0xb7C5A751CCa00b11AF3CA4A35e9e992f0f9c9c9c",
        "topics": ["0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"],
        "data": "0x0000000000000000000000000000000000000000000000000000000071672e7f000000000000000000000000000000000000000000000000000000046e07d0f60000000000000000000000000000000000000000000000000000004272753e6d000000000000000000000000000000000000000000000000063eb89da4ed0000",
        "logIndex": 0,
        "blockHash": "0x902eac2d68c8eaadda9ad70a654ec5b7723e0b275d30eac146ca0769bc06e22c"
      }
    ],
    "blockNumber": 34736953,
    "cumulativeGasUsed": "554524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "20000000000000000",
    "200000000000000000",
    "3000000000000000000",
    "450000000000000000",
    "0x45f8a08F534f34A97187626E05d4b6648Eeaa9AA"
  ],
  "numDeployments": 1,
  "solcInputHash": "82cd33260a9b17bbce6d70381b9dc2d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Arr00\",\"kind\":\"dev\",\"methods\":{\"getBorrowRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"badDebt\":\"The amount of badDebt in the market\",\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"badDebt\":\"The amount of badDebt in the market\",\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per block as a mantissa (scaled by EXP_SCALE)\"}},\"isInterestRateModel()\":{\"returns\":{\"_0\":\"Always true\"}},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"custom:access\":\"Controlled by AccessControlManager\",\"custom:error\":\"Unauthorized if the sender is not allowed to call this function\",\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\",\"jumpMultiplierPerYear\":\"The multiplierPerBlock after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by EXP_SCALE)\"}},\"utilizationRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"badDebt\":\"The amount of badDebt in the market\",\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, MANTISSA_ONE]\"}}},\"title\":\"Compound's JumpRateModel Contract V2 for V2 vTokens\",\"version\":1},\"userdoc\":{\"errors\":{\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"kind\":\"user\",\"methods\":{\"accessControlManager()\":{\"notice\":\"The address of the AccessControlManager contract\"},\"baseRatePerBlock()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"getBorrowRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block\"},\"getSupplyRate(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per block\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"jumpMultiplierPerBlock()\":{\"notice\":\"The multiplier per block after hitting a specified utilization point\"},\"kink()\":{\"notice\":\"The utilization point at which the jump multiplier is applied\"},\"multiplierPerBlock()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update the parameters of the interest rate model\"},\"utilizationRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `(borrows + badDebt) / (cash + borrows + badDebt - reserves)`\"}},\"notice\":\"Supports only for V2 vTokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JumpRateModelV2.sol\":\"JumpRateModelV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41deef84d1839590b243b66506691fde2fb938da01eabde53e82d3b8316fdaf9\",\"license\":\"BSD-3-Clause\"},\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\n\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { BLOCKS_PER_YEAR, EXP_SCALE, MANTISSA_ONE } from \\\"./lib/constants.sol\\\";\\n\\n/**\\n * @title Logic for Compound's JumpRateModel Contract V2.\\n * @author Compound (modified by Dharma Labs, Arr00 and Venus)\\n * @notice An interest rate model with a steep increase after a certain utilization threshold called **kink** is reached.\\n * The parameters of this interest rate model can be adjusted by the owner. Version 2 modifies Version 1 by enabling updateable parameters.\\n */\\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\\n    /**\\n     * @notice The address of the AccessControlManager contract\\n     */\\n    IAccessControlManagerV8 public accessControlManager;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint256 public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint256 public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplier per block after hitting a specified utilization point\\n     */\\n    uint256 public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint256 public kink;\\n\\n    event NewInterestParams(\\n        uint256 baseRatePerBlock,\\n        uint256 multiplierPerBlock,\\n        uint256 jumpMultiplierPerBlock,\\n        uint256 kink\\n    );\\n\\n    /**\\n     * @notice Thrown when the action is prohibited by AccessControlManager\\n     */\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by EXP_SCALE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param accessControlManager_ The address of the AccessControlManager contract\\n     */\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        IAccessControlManagerV8 accessControlManager_\\n    ) {\\n        require(address(accessControlManager_) != address(0), \\\"invalid ACM address\\\");\\n\\n        accessControlManager = accessControlManager_;\\n\\n        _updateJumpRateModel(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by EXP_SCALE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @custom:error Unauthorized if the sender is not allowed to call this function\\n     * @custom:access Controlled by AccessControlManager\\n     */\\n    function updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) external virtual {\\n        string memory signature = \\\"updateJumpRateModel(uint256,uint256,uint256,uint256)\\\";\\n        bool isAllowedToCall = accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n\\n        _updateJumpRateModel(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by EXP_SCALE)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa,\\n        uint256 badDebt\\n    ) public view virtual override returns (uint256) {\\n        uint256 oneMinusReserveFactor = MANTISSA_ONE - reserveFactorMantissa;\\n        uint256 borrowRate = _getBorrowRate(cash, borrows, reserves, badDebt);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / EXP_SCALE;\\n        uint256 incomeToDistribute = borrows * rateToPool;\\n        uint256 supply = cash + borrows + badDebt - reserves;\\n        return incomeToDistribute / supply;\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `(borrows + badDebt) / (cash + borrows + badDebt - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The utilization rate as a mantissa between [0, MANTISSA_ONE]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 badDebt\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows and badDebt\\n        if ((borrows + badDebt) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 rate = ((borrows + badDebt) * EXP_SCALE) / (cash + borrows + badDebt - reserves);\\n\\n        if (rate > EXP_SCALE) {\\n            rate = EXP_SCALE;\\n        }\\n\\n        return rate;\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by EXP_SCALE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by EXP_SCALE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function _updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) internal {\\n        baseRatePerBlock = baseRatePerYear / BLOCKS_PER_YEAR;\\n        multiplierPerBlock = multiplierPerYear / BLOCKS_PER_YEAR;\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear / BLOCKS_PER_YEAR;\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by EXP_SCALE)\\n     */\\n    function _getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 badDebt\\n    ) internal view returns (uint256) {\\n        uint256 util = utilizationRate(cash, borrows, reserves, badDebt);\\n        uint256 kink_ = kink;\\n\\n        if (util <= kink_) {\\n            return ((util * multiplierPerBlock) / EXP_SCALE) + baseRatePerBlock;\\n        }\\n        uint256 normalRate = ((kink_ * multiplierPerBlock) / EXP_SCALE) + baseRatePerBlock;\\n        uint256 excessUtil;\\n        unchecked {\\n            excessUtil = util - kink_;\\n        }\\n        return ((excessUtil * jumpMultiplierPerBlock) / EXP_SCALE) + normalRate;\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeecdb6212410755c76c61024f235f105279cd3b040f4d43578276243754b\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 badDebt\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa,\\n        uint256 badDebt\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Indicator that this is an InterestRateModel contract (for inspection)\\n     * @return Always true\\n     */\\n    function isInterestRateModel() external pure virtual returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x60ea8b0b70165acc3cf0f1e92f8dcea93ef5ddc2b8b99172799594aeec7c22b5\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\n\\nimport { BaseJumpRateModelV2 } from \\\"./BaseJumpRateModelV2.sol\\\";\\n\\n/**\\n * @title Compound's JumpRateModel Contract V2 for V2 vTokens\\n * @author Arr00\\n * @notice Supports only for V2 vTokens\\n */\\ncontract JumpRateModelV2 is BaseJumpRateModelV2 {\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        IAccessControlManagerV8 accessControlManager_\\n    )\\n        BaseJumpRateModelV2(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, accessControlManager_)\\n    /* solhint-disable-next-line no-empty-blocks */\\n    {\\n\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param badDebt The amount of badDebt in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 badDebt\\n    ) external view override returns (uint256) {\\n        return _getBorrowRate(cash, borrows, reserves, badDebt);\\n    }\\n}\\n\",\"keccak256\":\"0x4ed1afa149d27fbe7ac0f6099c90be41304aff5e45c81b390c357eb5391699c5\",\"license\":\"BSD-3-Clause\"},\"contracts/lib/constants.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @dev The approximate number of blocks per year that is assumed by the interest rate model\\nuint256 constant BLOCKS_PER_YEAR = 10_512_000;\\n\\n/// @dev Base unit for computations, usually used in scaling (multiplications, divisions)\\nuint256 constant EXP_SCALE = 1e18;\\n\\n/// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\\nuint256 constant MANTISSA_ONE = EXP_SCALE;\\n\",\"keccak256\":\"0x04cd899695ea593a2529cb6a1a04c2a34bff0c1516bd70a5f638ae7a850cad8b\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108be3803806108be83398101604081905261002f91610150565b84848484846001600160a01b03811661008e5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642041434d206164647265737300000000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556100b5858585856100c4565b505050505050505050506101cd565b6100d162a06680856101ab565b6002556100e162a06680846101ab565b6001556100f162a06680836101ab565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561016857600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b038116811461019d57600080fd5b809150509295509295909350565b6000826101c857634e487b7160e01b600052601260045260246000fd5b500490565b6106e2806101dc6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638726bb89116100665780638726bb8914610113578063b4a0bdf31461011c578063b9f9850a14610147578063f14039de14610150578063fd2da3391461015957600080fd5b8063073b8a74146100a35780630cde8d1c146100c95780632037f3e7146100dc5780632191f92a146100f157806370d3c43f14610100575b600080fd5b6100b66100b13660046104bf565b610162565b6040519081526020015b60405180910390f35b6100b66100d73660046104f1565b61017b565b6100ef6100ea3660046104bf565b61020e565b005b604051600181526020016100c0565b6100b661010e3660046104bf565b6102e5565b6100b660015481565b60005461012f906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100b660035481565b6100b660025481565b6100b660045481565b60006101708585858561036e565b90505b949350505050565b60008061019084670de0b6b3a7640000610542565b905060006101a08888888761036e565b90506000670de0b6b3a76400006101b78484610559565b6101c19190610578565b905060006101cf828a610559565b9050600088876101df8c8e61059a565b6101e9919061059a565b6101f39190610542565b90506101ff8183610578565b9b9a5050505050505050505050565b600060405180606001604052806034815260200161067960349139600080546040516318c5e8ab60e01b815292935090916001600160a01b03909116906318c5e8ab9061026190339086906004016105ff565b602060405180830381865afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610623565b9050806102d157333083604051634a3fa29360e01b81526004016102c89392919061064c565b60405180910390fd5b6102dd86868686610433565b505050505050565b60006102f1828561059a565b60000361030057506000610173565b6000838361030e878961059a565b610318919061059a565b6103229190610542565b670de0b6b3a7640000610335858861059a565b61033f9190610559565b6103499190610578565b9050670de0b6b3a76400008111156101705750670de0b6b3a764000095945050505050565b60008061037d868686866102e5565b6004549091508082116103c157600254670de0b6b3a7640000600154846103a49190610559565b6103ae9190610578565b6103b8919061059a565b92505050610173565b6000600254670de0b6b3a7640000600154846103dd9190610559565b6103e79190610578565b6103f1919061059a565b90506000828403905081670de0b6b3a7640000600354836104129190610559565b61041c9190610578565b610426919061059a565b9998505050505050505050565b61044062a0668085610578565b60025561045062a0668084610578565b60015561046062a0668083610578565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080608085870312156104d557600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a0868803121561050957600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b6000828210156105545761055461052c565b500390565b60008160001904831182151516156105735761057361052c565b500290565b60008261059557634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156105ad576105ad61052c565b500190565b6000815180845260005b818110156105d8576020818501810151868301820152016105bc565b818111156105ea576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610173908301846105b2565b60006020828403121561063557600080fd5b8151801515811461064557600080fd5b9392505050565b6001600160a01b03848116825283166020820152606060408201819052600090610170908301846105b256fe7570646174654a756d70526174654d6f64656c2875696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212206a37cebdb4b862acc229f004fa6e49bdd6e972410e73f5a533c3930dca0b66a464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638726bb89116100665780638726bb8914610113578063b4a0bdf31461011c578063b9f9850a14610147578063f14039de14610150578063fd2da3391461015957600080fd5b8063073b8a74146100a35780630cde8d1c146100c95780632037f3e7146100dc5780632191f92a146100f157806370d3c43f14610100575b600080fd5b6100b66100b13660046104bf565b610162565b6040519081526020015b60405180910390f35b6100b66100d73660046104f1565b61017b565b6100ef6100ea3660046104bf565b61020e565b005b604051600181526020016100c0565b6100b661010e3660046104bf565b6102e5565b6100b660015481565b60005461012f906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6100b660035481565b6100b660025481565b6100b660045481565b60006101708585858561036e565b90505b949350505050565b60008061019084670de0b6b3a7640000610542565b905060006101a08888888761036e565b90506000670de0b6b3a76400006101b78484610559565b6101c19190610578565b905060006101cf828a610559565b9050600088876101df8c8e61059a565b6101e9919061059a565b6101f39190610542565b90506101ff8183610578565b9b9a5050505050505050505050565b600060405180606001604052806034815260200161067960349139600080546040516318c5e8ab60e01b815292935090916001600160a01b03909116906318c5e8ab9061026190339086906004016105ff565b602060405180830381865afa15801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610623565b9050806102d157333083604051634a3fa29360e01b81526004016102c89392919061064c565b60405180910390fd5b6102dd86868686610433565b505050505050565b60006102f1828561059a565b60000361030057506000610173565b6000838361030e878961059a565b610318919061059a565b6103229190610542565b670de0b6b3a7640000610335858861059a565b61033f9190610559565b6103499190610578565b9050670de0b6b3a76400008111156101705750670de0b6b3a764000095945050505050565b60008061037d868686866102e5565b6004549091508082116103c157600254670de0b6b3a7640000600154846103a49190610559565b6103ae9190610578565b6103b8919061059a565b92505050610173565b6000600254670de0b6b3a7640000600154846103dd9190610559565b6103e79190610578565b6103f1919061059a565b90506000828403905081670de0b6b3a7640000600354836104129190610559565b61041c9190610578565b610426919061059a565b9998505050505050505050565b61044062a0668085610578565b60025561045062a0668084610578565b60015561046062a0668083610578565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080608085870312156104d557600080fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a0868803121561050957600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b6000828210156105545761055461052c565b500390565b60008160001904831182151516156105735761057361052c565b500290565b60008261059557634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156105ad576105ad61052c565b500190565b6000815180845260005b818110156105d8576020818501810151868301820152016105bc565b818111156105ea576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610173908301846105b2565b60006020828403121561063557600080fd5b8151801515811461064557600080fd5b9392505050565b6001600160a01b03848116825283166020820152606060408201819052600090610170908301846105b256fe7570646174654a756d70526174654d6f64656c2875696e743235362c75696e743235362c75696e743235362c75696e7432353629a26469706673582212206a37cebdb4b862acc229f004fa6e49bdd6e972410e73f5a533c3930dca0b66a464736f6c634300080d0033",
  "devdoc": {
    "author": "Arr00",
    "kind": "dev",
    "methods": {
      "getBorrowRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "badDebt": "The amount of badDebt in the market",
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "badDebt": "The amount of badDebt in the market",
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per block as a mantissa (scaled by EXP_SCALE)"
        }
      },
      "isInterestRateModel()": {
        "returns": {
          "_0": "Always true"
        }
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "custom:access": "Controlled by AccessControlManager",
        "custom:error": "Unauthorized if the sender is not allowed to call this function",
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by EXP_SCALE)",
          "jumpMultiplierPerYear": "The multiplierPerBlock after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by EXP_SCALE)"
        }
      },
      "utilizationRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "badDebt": "The amount of badDebt in the market",
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, MANTISSA_ONE]"
        }
      }
    },
    "title": "Compound's JumpRateModel Contract V2 for V2 vTokens",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "accessControlManager()": {
        "notice": "The address of the AccessControlManager contract"
      },
      "baseRatePerBlock()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "getBorrowRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per block"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "jumpMultiplierPerBlock()": {
        "notice": "The multiplier per block after hitting a specified utilization point"
      },
      "kink()": {
        "notice": "The utilization point at which the jump multiplier is applied"
      },
      "multiplierPerBlock()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "notice": "Update the parameters of the interest rate model"
      },
      "utilizationRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `(borrows + badDebt) / (cash + borrows + badDebt - reserves)`"
      }
    },
    "notice": "Supports only for V2 vTokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7416,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "accessControlManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAccessControlManagerV8)5203"
      },
      {
        "astId": 7419,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7422,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7425,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "jumpMultiplierPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7428,
        "contract": "contracts/JumpRateModelV2.sol:JumpRateModelV2",
        "label": "kink",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(IAccessControlManagerV8)5203": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
