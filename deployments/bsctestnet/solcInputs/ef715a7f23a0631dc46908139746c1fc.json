{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/DelegateBorrowers/SwapDebtDelegate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IPriceOracle {\n    function getUnderlyingPrice(IVToken vToken) external view returns (uint256);\n}\n\ninterface IComptroller {\n    function oracle() external view returns (IPriceOracle);\n}\n\ninterface IVToken {\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function comptroller() external view returns (IComptroller);\n\n    function underlying() external view returns (address);\n}\n\ncontract SwapDebtDelegate is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\n    /// @dev VToken return value signalling about successful execution\n    uint256 internal constant NO_ERROR = 0;\n\n    /// @notice Emitted if debt is swapped successfully\n    event DebtSwapped(\n        address indexed borrower,\n        address indexed vTokenRepaid,\n        uint256 repaidAmount,\n        address indexed vTokenBorrowed,\n        uint256 borrowedAmount\n    );\n\n    /// @notice Emitted when the owner transfers tokens, accidentially sent to this contract,\n    ///   to their account\n    event SweptTokens(address indexed token, uint256 amount);\n\n    /// @notice Thrown if VTokens' comptrollers are not equal\n    error ComptrollerMismatch();\n\n    /// @notice Thrown if repayment fails with an error code\n    error RepaymentFailed(uint256 errorCode);\n\n    /// @notice Thrown if borrow fails with an error code\n    error BorrowFailed(uint256 errorCode);\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    function initialize() external initializer {\n        __Ownable2Step_init();\n        __ReentrancyGuard_init();\n    }\n\n    /**\n     * @notice Repays a borrow in repayTo.underlying() and borrows borrowFrom.underlying()\n     * @param borrower The address of the borrower, whose debt to swap\n     * @param repayTo VToken to repay the debt to\n     * @param borrowFrom VToken to borrow from\n     * @param repayAmount The amount to repay in terms of repayTo.underlying()\n     */\n    function swapDebt(\n        address borrower,\n        IVToken repayTo,\n        IVToken borrowFrom,\n        uint256 repayAmount\n    ) external onlyOwner nonReentrant {\n        uint256 actualRepaymentAmount = _repay(repayTo, borrower, repayAmount);\n        uint256 amountToBorrow = _convert(repayTo, borrowFrom, actualRepaymentAmount);\n        _borrow(borrowFrom, borrower, amountToBorrow);\n        emit DebtSwapped(borrower, address(repayTo), actualRepaymentAmount, address(borrowFrom), amountToBorrow);\n    }\n\n    /**\n     * @notice Transfers tokens, accidentially sent to this contract, to the owner\n     * @param token ERC-20 token to sweep\n     */\n    function sweepTokens(IERC20Upgradeable token) external onlyOwner {\n        uint256 amount = token.balanceOf(address(this));\n        token.safeTransfer(owner(), amount);\n        emit SweptTokens(address(token), amount);\n    }\n\n    /**\n     * @dev Transfers the funds from the sender and repays a borrow in vToken on behalf of the borrower\n     * @param vToken VToken to repay the debt to\n     * @param borrower The address of the borrower, whose debt to repay\n     * @param repayAmount The amount to repay in terms of underlying\n     */\n    function _repay(\n        IVToken vToken,\n        address borrower,\n        uint256 repayAmount\n    ) internal returns (uint256 actualRepaymentAmount) {\n        IERC20Upgradeable underlying = IERC20Upgradeable(vToken.underlying());\n        uint256 balanceBefore = underlying.balanceOf(address(this));\n        underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\n        uint256 balanceAfter = underlying.balanceOf(address(this));\n        uint256 repayAmountMinusFee = balanceAfter - balanceBefore;\n\n        underlying.safeApprove(address(vToken), 0);\n        underlying.safeApprove(address(vToken), repayAmountMinusFee);\n        uint256 borrowBalanceBefore = vToken.borrowBalanceCurrent(borrower);\n        uint256 err = vToken.repayBorrowBehalf(borrower, repayAmountMinusFee);\n        if (err != NO_ERROR) {\n            revert RepaymentFailed(err);\n        }\n        uint256 borrowBalanceAfter = vToken.borrowBalanceCurrent(borrower);\n        return borrowBalanceBefore - borrowBalanceAfter;\n    }\n\n    /**\n     * @dev Borrows in vToken on behalf of the borrower and transfers the funds to the sender\n     * @param vToken VToken to borrow from\n     * @param borrower The address of the borrower, who will own the borrow\n     * @param borrowAmount The amount to borrow in terms of underlying\n     */\n    function _borrow(IVToken vToken, address borrower, uint256 borrowAmount) internal {\n        IERC20Upgradeable underlying = IERC20Upgradeable(vToken.underlying());\n        uint256 balanceBefore = underlying.balanceOf(address(this));\n        uint256 err = vToken.borrowBehalf(borrower, borrowAmount);\n        if (err != NO_ERROR) {\n            revert BorrowFailed(err);\n        }\n        uint256 balanceAfter = underlying.balanceOf(address(this));\n        uint256 actualBorrowedAmount = balanceAfter - balanceBefore;\n        underlying.safeTransfer(msg.sender, actualBorrowedAmount);\n    }\n\n    /**\n     * @dev Converts the value expressed in convertFrom.underlying() to a value\n     *   in convertTo.underlying(), using the oracle price\n     * @param convertFrom VToken to convert from\n     * @param convertTo VToken to convert to\n     * @param amount The amount in convertFrom.underlying()\n     */\n    function _convert(IVToken convertFrom, IVToken convertTo, uint256 amount) internal view returns (uint256) {\n        IComptroller comptroller = convertFrom.comptroller();\n        if (comptroller != convertTo.comptroller()) {\n            revert ComptrollerMismatch();\n        }\n        IPriceOracle oracle = comptroller.oracle();\n\n        // Decimals are accounted for in the oracle contract\n        uint256 scaledUsdValue = oracle.getUnderlyingPrice(convertFrom) * amount; // the USD value here has 36 decimals\n        return scaledUsdValue / oracle.getUnderlyingPrice(convertTo);\n    }\n}\n"
    },
    "contracts/Liquidator/Liquidator.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\ninterface IComptroller {\n    function liquidationIncentiveMantissa() external view returns (uint256);\n\n    function vaiController() external view returns (IVAIController);\n}\n\ninterface IVToken is IERC20Upgradeable {}\n\ninterface IVBep20 is IVToken {\n    function underlying() external view returns (address);\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external returns (uint256);\n}\n\ninterface IVBNB is IVToken {\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\n}\n\ninterface IVAIController {\n    function liquidateVAI(\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external returns (uint256, uint256);\n\n    function getVAIAddress() external view returns (address);\n}\n\ncontract Liquidator is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\n    /// @notice Address of vBNB contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVBNB public immutable vBnb;\n\n    /// @notice Address of Venus Unitroller contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IComptroller public immutable comptroller;\n\n    /// @notice Address of VAIUnitroller contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IVAIController public immutable vaiController;\n\n    /// @notice Address of Venus Treasury.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable treasury;\n\n    /* State */\n\n    /// @notice Percent of seized amount that goes to treasury.\n    uint256 public treasuryPercentMantissa;\n\n    /// @notice Mapping of addresses allowed to liquidate an account if liquidationRestricted[borrower] == true\n    mapping(address => mapping(address => bool)) public allowedLiquidatorsByAccount;\n\n    /// @notice Whether the liquidations are restricted to enabled allowedLiquidatorsByAccount addresses only\n    mapping(address => bool) public liquidationRestricted;\n\n    /* Events */\n\n    /// @notice Emitted when the percent of the seized amount that goes to treasury changes.\n    event NewLiquidationTreasuryPercent(uint256 oldPercent, uint256 newPercent);\n\n    /// @notice Emitted when a borrow is liquidated\n    event LiquidateBorrowedTokens(\n        address indexed liquidator,\n        address indexed borrower,\n        uint256 repayAmount,\n        address vTokenBorrowed,\n        address indexed vTokenCollateral,\n        uint256 seizeTokensForTreasury,\n        uint256 seizeTokensForLiquidator\n    );\n\n    /// @notice Emitted when the liquidation is restricted for a borrower\n    event LiquidationRestricted(address indexed borrower);\n\n    /// @notice Emitted when the liquidation restrictions are removed for a borrower\n    event LiquidationRestrictionsDisabled(address indexed borrower);\n\n    /// @notice Emitted when a liquidator is added to the allowedLiquidatorsByAccount mapping\n    event AllowlistEntryAdded(address indexed borrower, address indexed liquidator);\n\n    /// @notice Emitted when a liquidator is removed from the allowedLiquidatorsByAccount mapping\n    event AllowlistEntryRemoved(address indexed borrower, address indexed liquidator);\n\n    /* Errors */\n\n    /// @notice Thrown if the liquidation is restricted and the liquidator is not in the allowedLiquidatorsByAccount mapping\n    error LiquidationNotAllowed(address borrower, address liquidator);\n\n    /// @notice Thrown if VToken transfer fails after the liquidation\n    error VTokenTransferFailed(address from, address to, uint256 amount);\n\n    /// @notice Thrown if the liquidation is not successful (the error code is from TokenErrorReporter)\n    error LiquidationFailed(uint256 errorCode);\n\n    /// @notice Thrown if trying to restrict liquidations for an already restricted borrower\n    error AlreadyRestricted(address borrower);\n\n    /// @notice Thrown if trying to unrestrict liquidations for a borrower that is not restricted\n    error NoRestrictionsExist(address borrower);\n\n    /// @notice Thrown if the liquidator is already in the allowedLiquidatorsByAccount mapping\n    error AlreadyAllowed(address borrower, address liquidator);\n\n    /// @notice Thrown if trying to remove a liquidator that is not in the allowedLiquidatorsByAccount mapping\n    error AllowlistEntryNotFound(address borrower, address liquidator);\n\n    /// @notice Thrown if BNB amount sent with the transaction doesn't correspond to the\n    ///         intended BNB repayment\n    error WrongTransactionAmount(uint256 expected, uint256 actual);\n\n    /// @notice Thrown if the argument is a zero address because probably it is a mistake\n    error UnexpectedZeroAddress();\n\n    /// @notice Thrown if trying to set treasury percent larger than the liquidation profit\n    error TreasuryPercentTooHigh(uint256 maxTreasuryPercentMantissa, uint256 treasuryPercentMantissa_);\n\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @param comptroller_ The address of the Comptroller contract\n    /// @param vBnb_ The address of the VBNB\n    /// @param treasury_ The address of Venus treasury\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address comptroller_, address payable vBnb_, address treasury_) {\n        ensureNonzeroAddress(vBnb_);\n        ensureNonzeroAddress(comptroller_);\n        ensureNonzeroAddress(treasury_);\n        vBnb = IVBNB(vBnb_);\n        comptroller = IComptroller(comptroller_);\n        vaiController = IVAIController(IComptroller(comptroller_).vaiController());\n        treasury = treasury_;\n        _disableInitializers();\n    }\n\n    /// @notice Initializer for the implementation contract.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    function initialize(uint256 treasuryPercentMantissa_) external virtual initializer {\n        __Liquidator_init(treasuryPercentMantissa_);\n    }\n\n    /// @dev Liquidator initializer for derived contracts.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    function __Liquidator_init(uint256 treasuryPercentMantissa_) internal onlyInitializing {\n        __Ownable2Step_init();\n        __ReentrancyGuard_init();\n        __Liquidator_init_unchained(treasuryPercentMantissa_);\n    }\n\n    /// @dev Liquidator initializer for derived contracts that doesn't call parent initializers.\n    /// @param treasuryPercentMantissa_ Treasury share, scaled by 1e18 (e.g. 0.2 * 1e18 for 20%)\n    function __Liquidator_init_unchained(uint256 treasuryPercentMantissa_) internal onlyInitializing {\n        validateTreasuryPercentMantissa(treasuryPercentMantissa_);\n        treasuryPercentMantissa = treasuryPercentMantissa_;\n    }\n\n    /// @notice An admin function to restrict liquidations to allowed addresses only.\n    /// @dev Use {addTo,removeFrom}AllowList to configure the allowed addresses.\n    /// @param borrower The address of the borrower\n    function restrictLiquidation(address borrower) external onlyOwner {\n        if (liquidationRestricted[borrower]) {\n            revert AlreadyRestricted(borrower);\n        }\n        liquidationRestricted[borrower] = true;\n        emit LiquidationRestricted(borrower);\n    }\n\n    /// @notice An admin function to remove restrictions for liquidations.\n    /// @dev Does not impact the allowedLiquidatorsByAccount mapping for the borrower, just turns off the check.\n    /// @param borrower The address of the borrower\n    function unrestrictLiquidation(address borrower) external onlyOwner {\n        if (!liquidationRestricted[borrower]) {\n            revert NoRestrictionsExist(borrower);\n        }\n        liquidationRestricted[borrower] = false;\n        emit LiquidationRestrictionsDisabled(borrower);\n    }\n\n    /// @notice An admin function to add the liquidator to the allowedLiquidatorsByAccount mapping for a certain\n    ///         borrower. If the liquidations are restricted, only liquidators from the\n    ///         allowedLiquidatorsByAccount mapping can participate in liquidating the positions of this borrower.\n    /// @param borrower The address of the borrower\n    /// @param borrower The address of the liquidator\n    function addToAllowlist(address borrower, address liquidator) external onlyOwner {\n        if (allowedLiquidatorsByAccount[borrower][liquidator]) {\n            revert AlreadyAllowed(borrower, liquidator);\n        }\n        allowedLiquidatorsByAccount[borrower][liquidator] = true;\n        emit AllowlistEntryAdded(borrower, liquidator);\n    }\n\n    /// @notice An admin function to remove the liquidator from the allowedLiquidatorsByAccount mapping of a certain\n    ///         borrower. If the liquidations are restricted, this liquidator will not be\n    ///         able to liquidate the positions of this borrower.\n    /// @param borrower The address of the borrower\n    /// @param borrower The address of the liquidator\n    function removeFromAllowlist(address borrower, address liquidator) external onlyOwner {\n        if (!allowedLiquidatorsByAccount[borrower][liquidator]) {\n            revert AllowlistEntryNotFound(borrower, liquidator);\n        }\n        allowedLiquidatorsByAccount[borrower][liquidator] = false;\n        emit AllowlistEntryRemoved(borrower, liquidator);\n    }\n\n    /// @notice Liquidates a borrow and splits the seized amount between treasury and\n    ///         liquidator. The liquidators should use this interface instead of calling\n    ///         vToken.liquidateBorrow(...) directly.\n    /// @notice For BNB borrows msg.value should be equal to repayAmount; otherwise msg.value\n    ///      should be zero.\n    /// @param vToken Borrowed vToken\n    /// @param borrower The address of the borrower\n    /// @param repayAmount The amount to repay on behalf of the borrower\n    /// @param vTokenCollateral The collateral to seize\n    function liquidateBorrow(\n        address vToken,\n        address borrower,\n        uint256 repayAmount,\n        IVToken vTokenCollateral\n    ) external payable nonReentrant {\n        ensureNonzeroAddress(borrower);\n        checkRestrictions(borrower, msg.sender);\n        uint256 ourBalanceBefore = vTokenCollateral.balanceOf(address(this));\n        if (vToken == address(vBnb)) {\n            if (repayAmount != msg.value) {\n                revert WrongTransactionAmount(repayAmount, msg.value);\n            }\n            vBnb.liquidateBorrow{ value: msg.value }(borrower, vTokenCollateral);\n        } else {\n            if (msg.value != 0) {\n                revert WrongTransactionAmount(0, msg.value);\n            }\n            if (vToken == address(vaiController)) {\n                _liquidateVAI(borrower, repayAmount, vTokenCollateral);\n            } else {\n                _liquidateBep20(IVBep20(vToken), borrower, repayAmount, vTokenCollateral);\n            }\n        }\n        uint256 ourBalanceAfter = vTokenCollateral.balanceOf(address(this));\n        uint256 seizedAmount = ourBalanceAfter - ourBalanceBefore;\n        (uint256 ours, uint256 theirs) = _distributeLiquidationIncentive(vTokenCollateral, seizedAmount);\n        emit LiquidateBorrowedTokens(\n            msg.sender,\n            borrower,\n            repayAmount,\n            vToken,\n            address(vTokenCollateral),\n            ours,\n            theirs\n        );\n    }\n\n    /// @notice Sets the new percent of the seized amount that goes to treasury. Should\n    ///         be less than or equal to comptroller.liquidationIncentiveMantissa().sub(1e18).\n    /// @param newTreasuryPercentMantissa New treasury percent (scaled by 10^18).\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external onlyOwner {\n        validateTreasuryPercentMantissa(newTreasuryPercentMantissa);\n        emit NewLiquidationTreasuryPercent(treasuryPercentMantissa, newTreasuryPercentMantissa);\n        treasuryPercentMantissa = newTreasuryPercentMantissa;\n    }\n\n    /// @dev Transfers BEP20 tokens to self, then approves vToken to take these tokens.\n    function _liquidateBep20(IVBep20 vToken, address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {\n        IERC20Upgradeable borrowedToken = IERC20Upgradeable(vToken.underlying());\n        uint256 actualRepayAmount = _transferBep20(borrowedToken, msg.sender, address(this), repayAmount);\n        borrowedToken.safeApprove(address(vToken), 0);\n        borrowedToken.safeApprove(address(vToken), actualRepayAmount);\n        requireNoError(vToken.liquidateBorrow(borrower, actualRepayAmount, vTokenCollateral));\n    }\n\n    /// @dev Transfers BEP20 tokens to self, then approves VAI to take these tokens.\n    function _liquidateVAI(address borrower, uint256 repayAmount, IVToken vTokenCollateral) internal {\n        IERC20Upgradeable vai = IERC20Upgradeable(vaiController.getVAIAddress());\n        vai.safeTransferFrom(msg.sender, address(this), repayAmount);\n        vai.safeApprove(address(vaiController), 0);\n        vai.safeApprove(address(vaiController), repayAmount);\n\n        (uint err, ) = vaiController.liquidateVAI(borrower, repayAmount, vTokenCollateral);\n        requireNoError(err);\n    }\n\n    /// @dev Splits the received vTokens between the liquidator and treasury.\n    function _distributeLiquidationIncentive(\n        IVToken vTokenCollateral,\n        uint256 siezedAmount\n    ) internal returns (uint256 ours, uint256 theirs) {\n        (ours, theirs) = _splitLiquidationIncentive(siezedAmount);\n        if (!vTokenCollateral.transfer(msg.sender, theirs)) {\n            revert VTokenTransferFailed(address(this), msg.sender, theirs);\n        }\n        if (!vTokenCollateral.transfer(treasury, ours)) {\n            revert VTokenTransferFailed(address(this), treasury, ours);\n        }\n        return (ours, theirs);\n    }\n\n    /// @dev Transfers tokens and returns the actual transfer amount\n    function _transferBep20(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal returns (uint256 actualAmount) {\n        uint256 prevBalance = token.balanceOf(to);\n        token.safeTransferFrom(from, to, amount);\n        return token.balanceOf(to) - prevBalance;\n    }\n\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\n    function _splitLiquidationIncentive(uint256 seizedAmount) internal view returns (uint256 ours, uint256 theirs) {\n        uint256 totalIncentive = comptroller.liquidationIncentiveMantissa();\n        ours = (seizedAmount * treasuryPercentMantissa) / totalIncentive;\n        theirs = seizedAmount - ours;\n        return (ours, theirs);\n    }\n\n    function requireNoError(uint errCode) internal pure {\n        if (errCode == uint(0)) {\n            return;\n        }\n\n        revert LiquidationFailed(errCode);\n    }\n\n    function ensureNonzeroAddress(address address_) internal pure {\n        if (address_ == address(0)) {\n            revert UnexpectedZeroAddress();\n        }\n    }\n\n    function checkRestrictions(address borrower, address liquidator) internal view {\n        if (liquidationRestricted[borrower] && !allowedLiquidatorsByAccount[borrower][liquidator]) {\n            revert LiquidationNotAllowed(borrower, liquidator);\n        }\n    }\n\n    function validateTreasuryPercentMantissa(uint256 treasuryPercentMantissa_) internal view {\n        uint256 maxTreasuryPercentMantissa = comptroller.liquidationIncentiveMantissa() - 1e18;\n        if (treasuryPercentMantissa_ > maxTreasuryPercentMantissa) {\n            revert TreasuryPercentTooHigh(maxTreasuryPercentMantissa, treasuryPercentMantissa_);\n        }\n    }\n}\n"
    },
    "contracts/Oracle/AggregatorV2V3Interface.sol": {
      "content": "pragma solidity >=0.5.0;\n\n/**\n * @title The V2 & V3 Aggregator Interface\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\n * and v0.5 AggregatorV3Interface.sol.\n */\ninterface AggregatorV2V3Interface {\n    //\n    // V2 Interface:\n    //\n    function latestAnswer() external view returns (int256);\n\n    function latestTimestamp() external view returns (uint256);\n\n    function latestRound() external view returns (uint256);\n\n    function getAnswer(uint256 roundId) external view returns (int256);\n\n    function getTimestamp(uint256 roundId) external view returns (uint256);\n\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n\n    //\n    // V3 Interface:\n    //\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Swap/interfaces/CustomErrors.sol": {
      "content": "pragma solidity ^0.8.13;\n// **************\n// *** ERRORS ***\n// **************\n\n///@notice Error indicating that suplying to a given market failed.\nerror SupplyError(address supplier, address vToken, uint256 errorCode);\n\n///@notice Error indicating that repaying to given market failed.\nerror RepayError(address repayer, address vToken, uint256 errorCode);\n\n///@notice Error indicating wBNB address passed is not the expected one.\nerror WrongAddress(address expectedAdddress, address passedAddress);\n\n///@notice Error thrown when deadline for swap has expired\nerror SwapDeadlineExpire(uint256 deadline, uint256 currentBlock);\n\n///@notice Error thrown where the input amount parameter for a token is 0\nerror InsufficientInputAmount();\n\n///@notice Error thrown when the amount out passed is 0\nerror InsufficientOutputAmount();\n\n///@notice Error thrown when the amount received from a trade is below the minimum\nerror OutputAmountBelowMinimum(uint256 amountOut, uint256 amountOutMin);\n\n///@notice Error thrown when the amount In is above the amount in maximum\nerror InputAmountAboveMaximum(uint256 amountIn, uint256 amountIntMax);\n\n///@notice Error thrown when amount is above the msg.value(amountMax)\nerror ExcessiveInputAmount(uint256 amount, uint256 amountMax);\n\n///@notice Error thrown when the given reserves are equal to 0\nerror InsufficientLiquidity();\n\n///@notice Error thrown if a zero address is passed\nerror ZeroAddress();\n\n///@notice Error thrown if two token addresses are identical\nerror IdenticalAddresses();\n\n///@notice Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)\nerror InvalidPath();\n\n//@notice Error thrown when invalid vTOken address is passed to swap router.\nerror VTokenNotListed(address vToken);\n"
    },
    "contracts/Swap/interfaces/InterfaceComptroller.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface InterfaceComptroller {\n    function markets(address) external view returns (bool);\n}\n"
    },
    "contracts/Swap/interfaces/IPancakePair.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint);\n\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/Swap/interfaces/IPancakeSwapV2Factory.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPancakeSwapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/Swap/interfaces/IPancakeSwapV2Router.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IPancakeSwapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokensAtSupportingFee(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETHAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapAndSupply(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapBnbAndSupply(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapBnbAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapETHForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapAndRepay(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapBnbAndRepay(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapBnbAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external;\n\n    function swapETHForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHAndRepay(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForExactETHAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n\n    function swapTokensForFullETHDebtAndRepay(\n        address vBNBAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable;\n}\n"
    },
    "contracts/Swap/interfaces/IVBNB.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IVBNB {\n    function repayBorrowBehalf(address borrower) external payable;\n}\n"
    },
    "contracts/Swap/interfaces/IVtoken.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IVToken {\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\n\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n\n    function borrowBalanceCurrent(address account) external returns (uint);\n}\n"
    },
    "contracts/Swap/interfaces/IWBNB.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.13;\n\ninterface IWBNB {\n    function deposit() external payable;\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function withdraw(uint) external;\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n"
    },
    "contracts/Swap/IRouterHelper.sol": {
      "content": "pragma solidity 0.8.13;\n\ninterface IRouterHelper {\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Swap/lib/PancakeLibrary.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"../interfaces/IPancakePair.sol\";\nimport \"../interfaces/CustomErrors.sol\";\n\nlibrary PancakeLibrary {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) {\n            revert IdenticalAddresses();\n        }\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        if (token0 == address(0)) {\n            revert ZeroAddress();\n        }\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        address pairAddress = pairFor(factory, tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairAddress).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\n        if (amountA == 0) {\n            revert InsufficientInputAmount();\n        } else if (reserveA == 0 && reserveB == 0) {\n            revert InsufficientLiquidity();\n        }\n        require(reserveA > 0 && reserveB > 0, \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        if (amountIn == 0) {\n            revert InsufficientInputAmount();\n        } else if (reserveIn == 0 && reserveOut == 0) {\n            revert InsufficientLiquidity();\n        }\n        uint256 amountInWithFee = amountIn * 998;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        if (amountOut == 0) {\n            revert InsufficientOutputAmount();\n        } else if (reserveIn == 0 && reserveOut == 0) {\n            revert InsufficientLiquidity();\n        }\n        uint256 numerator = reserveIn * amountOut * 1000;\n        uint256 denominator = (reserveOut - amountOut) * 998;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        if (path.length <= 1) {\n            revert InvalidPath();\n        }\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        if (path.length <= 1) {\n            revert InvalidPath();\n        }\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/Swap/lib/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.13;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/Swap/RouterHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./lib/PancakeLibrary.sol\";\nimport \"./interfaces/IWBNB.sol\";\nimport \"./lib/TransferHelper.sol\";\n\nimport \"./interfaces/CustomErrors.sol\";\nimport \"./IRouterHelper.sol\";\n\nabstract contract RouterHelper is IRouterHelper {\n    enum TypesOfTokens {\n        NON_SUPPORTING_FEE,\n        SUPPORTING_FEE\n    }\n\n    /// @notice Address of WBNB contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable WBNB;\n\n    /// @notice Address of pancake swap factory contract.\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable factory;\n\n    // **************\n    // *** EVENTS ***\n    // **************\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\n    event SwapTokensForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\n    event SwapBnbForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\n    event SwapTokensForBnb(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address WBNB_, address factory_) {\n        if (WBNB_ == address(0) || factory_ == address(0)) {\n            revert ZeroAddress();\n        }\n        WBNB = WBNB_;\n        factory = factory_;\n    }\n\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint256[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint256 i; i < path.length - 1; ++i) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            IPancakePair(PancakeLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\n            IPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n\n                uint256 balance = IERC20(input).balanceOf(address(pair));\n                amountInput = balance - reserveInput;\n                amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOutput)\n                : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {\n        amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\n        if (amounts[amounts.length - 1] < amountOutMin) {\n            revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n        }\n        address pairAddress = PancakeLibrary.pairFor(factory, path[0], path[1]);\n        TransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amounts[0]);\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\n            _swap(amounts, path, to);\n        } else {\n            _swapSupportingFeeOnTransferTokens(path, to);\n        }\n        emit SwapTokensForTokens(msg.sender, path, amounts);\n    }\n\n    function _swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {\n        address wBNBAddress = WBNB;\n        if (path[0] != wBNBAddress) {\n            revert WrongAddress(wBNBAddress, path[0]);\n        }\n        amounts = PancakeLibrary.getAmountsOut(factory, msg.value, path);\n        if (amounts[amounts.length - 1] < amountOutMin) {\n            revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n        }\n        IWBNB(wBNBAddress).deposit{ value: amounts[0] }();\n        assert(IWBNB(wBNBAddress).transfer(PancakeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\n            _swap(amounts, path, to);\n        } else {\n            _swapSupportingFeeOnTransferTokens(path, to);\n        }\n        emit SwapBnbForTokens(msg.sender, path, amounts);\n    }\n\n    function _swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        TypesOfTokens swapFor\n    ) internal returns (uint256[] memory amounts) {\n        if (path[path.length - 1] != WBNB) {\n            revert WrongAddress(WBNB, path[path.length - 1]);\n        }\n        amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\n        if (amounts[amounts.length - 1] < amountOutMin) {\n            revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\n        }\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\n            _swap(amounts, path, address(this));\n        } else {\n            _swapSupportingFeeOnTransferTokens(path, address(this));\n        }\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\n        if (to != address(this)) {\n            TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n        }\n        emit SwapTokensForBnb(msg.sender, path, amounts);\n    }\n\n    function _swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\n        if (amounts[0] > amountInMax) {\n            revert InputAmountAboveMaximum(amounts[0], amountInMax);\n        }\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n        emit SwapTokensForTokens(msg.sender, path, amounts);\n    }\n\n    function _swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {\n        if (path[0] != WBNB) {\n            revert WrongAddress(WBNB, path[0]);\n        }\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\n        if (amounts[0] > msg.value) {\n            revert ExcessiveInputAmount(amounts[0], msg.value);\n        }\n        IWBNB(WBNB).deposit{ value: amounts[0] }();\n        assert(IWBNB(WBNB).transfer(PancakeLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n        emit SwapBnbForTokens(msg.sender, path, amounts);\n    }\n\n    function _swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) internal returns (uint256[] memory amounts) {\n        if (path[path.length - 1] != WBNB) {\n            revert WrongAddress(WBNB, path[path.length - 1]);\n        }\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\n        if (amounts[0] > amountInMax) {\n            revert InputAmountAboveMaximum(amounts[amounts.length - 1], amountInMax);\n        }\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\n        if (to != address(this)) {\n            TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n        }\n        emit SwapTokensForBnb(msg.sender, path, amounts);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) public pure virtual override returns (uint256 amountB) {\n        return PancakeLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountOut) {\n        return PancakeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure virtual override returns (uint256 amountIn) {\n        return PancakeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] memory path\n    ) public view virtual override returns (uint256[] memory amounts) {\n        return PancakeLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] memory path\n    ) public view virtual override returns (uint256[] memory amounts) {\n        return PancakeLibrary.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "contracts/Swap/SwapRouter.sol": {
      "content": "pragma solidity 0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./interfaces/IPancakeSwapV2Router.sol\";\nimport \"./interfaces/IVtoken.sol\";\nimport \"./RouterHelper.sol\";\nimport \"./interfaces/IVBNB.sol\";\nimport \"./interfaces/InterfaceComptroller.sol\";\n\n/**\n * @title Venus's Pancake Swap Integration Contract\n * @notice This contracts allows users to swap a token for another one and supply/repay with the latter.\n * @dev For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.\n * @author 0xlucian\n */\n\ncontract SwapRouter is Ownable2StepUpgradeable, RouterHelper, IPancakeSwapV2Router {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public comptrollerAddress;\n\n    // ***************\n    // ** MODIFIERS **\n    // ***************\n    modifier ensure(uint256 deadline) {\n        if (deadline < block.timestamp) {\n            revert SwapDeadlineExpire(deadline, block.timestamp);\n        }\n        _;\n    }\n\n    modifier ensureVTokenListed(address vTokenAddress) {\n        bool isListed = InterfaceComptroller(comptrollerAddress).markets(vTokenAddress);\n        if (isListed != true) {\n            revert VTokenNotListed(vTokenAddress);\n        }\n        _;\n    }\n\n    /// @notice event emitted on sweep token success\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\n\n    // *********************\n    // **** CONSTRUCTOR ****\n    // *********************\n\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address WBNB_, address factory_) RouterHelper(WBNB_, factory_) {\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\n        // to set the state variables.\n        _disableInitializers();\n    }\n\n    receive() external payable {\n        assert(msg.sender == WBNB); // only accept BNB via fallback from the WBNB contract\n    }\n\n    // *********************\n    // **** INITIALIZE *****\n    // *********************\n    function initialize(address _comptrollerAddress) external initializer {\n        __Ownable2Step_init();\n        comptrollerAddress = _comptrollerAddress;\n    }\n\n    // ****************************\n    // **** EXTERNAL FUNCTIONS ****\n    // ****************************\n\n    /**\n     * @notice Swap token A for token B and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     */\n    function swapAndSupply(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap token A for token B and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     */\n    function swapAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and supply to a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapBnbAndSupply(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactETHForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and supply to a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapBnbAndSupplyAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactETHForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for Exact tokens and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for Exact tokens and supply to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapETHForExactTokensAndSupply(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapETHForExactTokens(amountOut, path, address(this));\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _supply(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap token A for token B and repay a borrow from a Venus market\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\n     */\n    function swapAndRepay(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap token A for token B and repay a borrow from a Venus market\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\n     */\n    function swapAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and repay a borrow from a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\n     */\n    function swapBnbAndRepay(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactETHForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for another token and repay a borrow from a Venus market\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\n     * @param vTokenAddress The address of the vToken contract to repay.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\n     */\n    function swapBnbAndRepayAtSupportingFee(\n        address vTokenAddress,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapExactETHForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for Exact tokens and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap tokens for full tokens debt and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForFullTokenDebtAndRepay(\n        address vTokenAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapETHForExactTokensAndRepay(\n        address vTokenAddress,\n        uint256 amountOut,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) ensureVTokenListed(vTokenAddress) {\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(address(this));\n        _swapETHForExactTokens(amountOut, path, address(this));\n        uint256 balanceAfter = IERC20(path[path.length - 1]).balanceOf(address(this));\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        _repay(path[path.length - 1], vTokenAddress, swapAmount);\n    }\n\n    /**\n     * @notice Swap Exact tokens for BNB and repay to a Venus market\n     * @param vBNBAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForETHAndRepay(\n        address vBNBAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) {\n        uint256 balanceBefore = address(this).balance;\n        _swapExactTokensForETH(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\n        uint256 balanceAfter = address(this).balance;\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap Exact tokens for BNB and repay to a Venus market\n     * @param vBNBAddress The address of the vToken contract for supplying assets.\n     * @param amountIn The amount of tokens to swap.\n     * @param amountOutMin Minimum amount of tokens to receive.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapExactTokensForETHAndRepayAtSupportingFee(\n        address vBNBAddress,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) {\n        uint256 balanceBefore = address(this).balance;\n        _swapExactTokensForETH(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\n        uint256 balanceAfter = address(this).balance;\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\n     * @param vBNBAddress The address of the vToken contract for supplying assets.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForExactETHAndRepay(\n        address vBNBAddress,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) {\n        uint256 balanceBefore = address(this).balance;\n        _swapTokensForExactETH(amountOut, amountInMax, path, address(this));\n        uint256 balanceAfter = address(this).balance;\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\n     * @param vBNBAddress The address of the vToken contract for supplying assets.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\n     */\n    function swapTokensForFullETHDebtAndRepay(\n        address vBNBAddress,\n        uint256 amountInMax,\n        address[] calldata path,\n        uint256 deadline\n    ) external payable override ensure(deadline) {\n        uint256 balanceBefore = address(this).balance;\n        uint256 amountOut = IVToken(vBNBAddress).borrowBalanceCurrent(msg.sender);\n        _swapTokensForExactETH(amountOut, amountInMax, path, address(this));\n        uint256 balanceAfter = address(this).balance;\n        uint256 swapAmount = balanceAfter - balanceBefore;\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForTokensAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path must be WBNB,\n     *         the last is the output token, and any intermediate elements represent\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev amountIn is passed through the msg.value of the transaction\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactETHForTokens(amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible,\n     *         along the route determined by the path. The first element of path must be WBNB,\n     *         the last is the output token, and any intermediate elements represent\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev amountIn is passed through the msg.value of the transaction\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactETHForTokensAtSupportingFee(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactETHForTokens(amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactTokensForETH(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     *         This method to swap deflationary tokens which would require supporting fee.\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountIn The address of the vToken contract to repay.\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     */\n    function swapExactTokensForETHAtSupportingFee(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapExactTokensForETH(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\n    }\n\n    /**\n     * @notice Swaps an as many amount of input tokens for as exact amount of tokens as output,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapTokensForExactTokens(amountOut, amountInMax, path, to);\n    }\n\n    /**\n     * @notice Swaps an as ETH as input tokens for as exact amount of tokens as output,\n     *         along the route determined by the path. The first element of path is the input WBNB,\n     *         the last is the output as token, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapETHForExactTokens(amountOut, path, to);\n    }\n\n    /**\n     * @notice Swaps an as many amount of input tokens for as exact amount of ETH as output,\n     *         along the route determined by the path. The first element of path is the input token,\n     *         the last is the output as ETH, and any intermediate elements represent intermediate\n     *         pairs to trade through (if, for example, a direct pair does not exist).\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\n     * @param amountOut The amount of the tokens needs to be as output token.\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\n     * @param path Array with addresses of the underlying assets to be swapped\n     * @param to Recipient of the output tokens.\n     * @param deadline Unix timestamp after which the transaction will revert.\n     **/\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = _swapTokensForExactETH(amountOut, amountInMax, path, to);\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     * @param sweepAmount The ampunt of the tokens to sweep\n     * @custom:access Only Governance\n     */\n    function sweepToken(IERC20Upgradeable token, address to, uint256 sweepAmount) external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        require(sweepAmount <= balance, \"SwapRouter::insufficient balance\");\n        token.safeTransfer(to, sweepAmount);\n\n        emit SweepToken(address(token), to, sweepAmount);\n    }\n\n    /**\n     * @notice supply token to a Venus market\n     * @param path the addresses of the underlying token\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param swapAmount the amount of tokens supply to Venus Market.\n     */\n    function _supply(address path, address vTokenAddress, uint256 swapAmount) internal {\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\n        uint256 response = IVToken(vTokenAddress).mintBehalf(msg.sender, swapAmount);\n        if (response != 0) {\n            revert SupplyError(msg.sender, vTokenAddress, response);\n        }\n    }\n\n    /**\n     * @notice repay a borrow from Venus market\n     * @param path the addresses of the underlying token\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\n     * @param swapAmount the amount of tokens repay to Venus Market.\n     */\n    function _repay(address path, address vTokenAddress, uint256 swapAmount) internal {\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\n        uint256 response = IVToken(vTokenAddress).repayBorrowBehalf(msg.sender, swapAmount);\n        if (response != 0) {\n            revert RepayError(msg.sender, vTokenAddress, response);\n        }\n    }\n}\n"
    },
    "contracts/test/LiquidatorHarness.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity 0.8.13;\n\nimport \"../Liquidator/Liquidator.sol\";\n\ncontract LiquidatorHarness is Liquidator {\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(\n        address comptroller_,\n        address payable vBnb_,\n        address treasury_\n    ) Liquidator(comptroller_, vBnb_, treasury_) {}\n\n    function initialize(uint256 liquidationIncentiveMantissa_) external override initializer {\n        __Liquidator_init(liquidationIncentiveMantissa_);\n    }\n\n    event DistributeLiquidationIncentive(uint256 seizeTokensForTreasury, uint256 seizeTokensForLiquidator);\n\n    /// @dev Splits the received vTokens between the liquidator and treasury.\n    function distributeLiquidationIncentive(\n        IVToken vTokenCollateral,\n        uint256 siezedAmount\n    ) public returns (uint256 ours, uint256 theirs) {\n        (ours, theirs) = super._distributeLiquidationIncentive(vTokenCollateral, siezedAmount);\n        emit DistributeLiquidationIncentive(ours, theirs);\n        return (ours, theirs);\n    }\n\n    /// @dev Computes the amounts that would go to treasury and to the liquidator.\n    function splitLiquidationIncentive(uint256 seizedAmount) public view returns (uint256 ours, uint256 theirs) {\n        return super._splitLiquidationIncentive(seizedAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
