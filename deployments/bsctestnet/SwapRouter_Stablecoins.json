{
  "address": "0x8Ff3c0a74b4CBD4dFA3A35Cca756490bE351F936",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "WBNB_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptrollerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vBNBAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountMax",
          "type": "uint256"
        }
      ],
      "name": "ExcessiveInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdenticalAddresses",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIntMax",
          "type": "uint256"
        }
      ],
      "name": "InputAmountAboveMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPath",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "OutputAmountBelowMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RepayError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeApproveFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferBNBFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFromFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "SupplyError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "SwapAmountLessThanAmountOutMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestemp",
          "type": "uint256"
        }
      ],
      "name": "SwapDeadlineExpire",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "VTokenNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "VTokenUnderlyingInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expectedAdddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "passedAddress",
          "type": "address"
        }
      ],
      "name": "WrongAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "SwapBnbForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "SwapBnbForTokensAtSupportingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "SwapTokensForBnb",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "SwapTokensForBnbAtSupportingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "SwapTokensForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "SwapTokensForTokensAtSupportingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        }
      ],
      "name": "SweepToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "VBNBAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vBNBAddress",
          "type": "address"
        }
      ],
      "name": "setVBNBAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapBNBForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapBNBForExactTokensAndRepay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapBNBForExactTokensAndSupply",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapBNBForFullTokenDebtAndRepay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokensAndRepay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokensAndRepayAtSupportingFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokensAndSupply",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokensAndSupplyAtSupportingFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactBNBForTokensAtSupportingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNB",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNBAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNBAndRepayAtSupportingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNBAndSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNBAndSupplyAtSupportingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForBNBAtSupportingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensAndRepayAtSupportingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensAndSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensAndSupplyAtSupportingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensAtSupportingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactBNB",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactBNBAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactBNBAndSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokensAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokensAndSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForFullBNBDebtAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForFullTokenDebtAndRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBNBAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfcbe5744a3e60f9d6be86d303c735ffcd8f8e395aefc8e537326c03e2bccc14c",
  "receipt": {
    "to": null,
    "from": "0x2Ce1d0ffD7E869D9DF33e28552b12DdDed326706",
    "contractAddress": "0x8Ff3c0a74b4CBD4dFA3A35Cca756490bE351F936",
    "transactionIndex": 12,
    "gasUsed": "5348193",
    "logsBloom": "0x
    "blockHash": "0x200c685cd8886c0ecd497dcb578547f31d08467969808cdf7a0b832cabc3c2aa",
    "transactionHash": "0xfcbe5744a3e60f9d6be86d303c735ffcd8f8e395aefc8e537326c03e2bccc14c",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 31152170,
        "transactionHash": "0xfcbe5744a3e60f9d6be86d303c735ffcd8f8e395aefc8e537326c03e2bccc14c",
        "address": "0x8Ff3c0a74b4CBD4dFA3A35Cca756490bE351F936",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002ce1d0ffd7e869d9df33e28552b12ddded326706"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x200c685cd8886c0ecd497dcb578547f31d08467969808cdf7a0b832cabc3c2aa"
      }
    ],
    "blockNumber": 31152170,
    "cumulativeGasUsed": "5723458",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0x182859893230dC89b114d6e2D547BFFE30474a21",
    "0x10b57706AD2345e590c2eA4DC02faef0d9f5b08B",
    "0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c"
  ],
  "numDeployments": 1,
  "solcInputHash": "4560789cb94cbedd1c3262c97183284d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WBNB_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptrollerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vBNBAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"}],\"name\":\"ExcessiveInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIntMax\",\"type\":\"uint256\"}],\"name\":\"InputAmountAboveMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"OutputAmountBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepayError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferBNBFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"SupplyError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"SwapAmountLessThanAmountOutMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestemp\",\"type\":\"uint256\"}],\"name\":\"SwapDeadlineExpire\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"VTokenNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"VTokenUnderlyingInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedAdddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"passedAddress\",\"type\":\"address\"}],\"name\":\"WrongAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapBnbForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBnbForTokensAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapTokensForBnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForBnbAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokensAtSupportingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"SweepToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"VBNBAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vBNBAddress\",\"type\":\"address\"}],\"name\":\"setVBNBAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForExactTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapBNBForFullTokenDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBNBForTokensAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNB\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForBNBAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndRepayAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAndSupplyAtSupportingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensAtSupportingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNB\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNBAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactBNBAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensAndSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForFullBNBDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForFullTokenDebtAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNBAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"0xlucian\",\"details\":\"For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getAmountIn(uint256,uint256,uint256)\":{\"params\":{\"amountOut\":\"The amount of token B after swap\",\"reserveIn\":\"The amount of reserves for token A before swap\",\"reserveOut\":\"The amount of reserves for token B after swap\"},\"returns\":{\"amountIn\":\"Required input amount of the token A*\"}},\"getAmountOut(uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"The amount of token A need to swap\",\"reserveIn\":\"The amount of reserves for token A before swap\",\"reserveOut\":\"The amount of reserves for token B after swap\"},\"returns\":{\"amountOut\":\"The maximum output amount of the token B*\"}},\"getAmountsIn(uint256,address[])\":{\"params\":{\"amountOut\":\"amountOut The amount of the tokens needs to be as output token.\",\"path\":\"Array with addresses of the underlying assets to be swapped.\"}},\"getAmountsOut(uint256,address[])\":{\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"path\":\"Array with addresses of the underlying assets to be swapped.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"quote(uint256,uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of token A\",\"reserveA\":\"The amount of reserves for token A before swap\",\"reserveB\":\"The amount of reserves for token B before swap\"},\"returns\":{\"amountB\":\"An equivalent amount of the token B*\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVBNBAddress(address)\":{\"params\":{\"_vBNBAddress\":\"Address of the BNB vToken to update.\"}},\"swapBNBForExactTokens(uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.*\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapBNBForExactTokensAndRepay(address,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapBNBForExactTokensAndSupply(address,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapBNBForFullTokenDebtAndRepay(address,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapExactBNBForTokens(uint256,address[],address,uint256)\":{\"details\":\"amountIn is passed through the msg.value of the transaction\",\"params\":{\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapExactBNBForTokensAndRepay(address,uint256,address[],uint256)\":{\"details\":\"The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\",\"params\":{\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract to repay.\"}},\"swapExactBNBForTokensAndRepayAtSupportingFee(address,uint256,address[],uint256)\":{\"details\":\"The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\",\"params\":{\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract to repay.\"}},\"swapExactBNBForTokensAndSupply(address,uint256,address[],uint256)\":{\"details\":\"The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapExactBNBForTokensAndSupplyAtSupportingFee(address,uint256,address[],uint256)\":{\"details\":\"The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapExactBNBForTokensAtSupportingFee(uint256,address[],address,uint256)\":{\"details\":\"amountIn is passed through the msg.value of the transaction\",\"params\":{\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapExactTokensForBNB(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountIn\":\"The address of the vToken contract to repay.\",\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapExactTokensForBNBAndRepay(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapExactTokensForBNBAndRepayAtSupportingFee(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapExactTokensForBNBAndSupply(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapExactTokensForBNBAndSupplyAtSupportingFee(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapExactTokensForBNBAtSupportingFee(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountIn\":\"The address of the vToken contract to repay.\",\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountIn\":\"The address of the vToken contract to repay.\",\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapExactTokensForTokensAndRepay(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract to repay.\"}},\"swapExactTokensForTokensAndRepayAtSupportingFee(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract to repay.\"}},\"swapExactTokensForTokensAndSupply(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapExactTokensForTokensAndSupplyAtSupportingFee(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\",\"params\":{\"amountIn\":\"The amount of tokens to swap.\",\"amountOutMin\":\"Minimum amount of tokens to receive.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapExactTokensForTokensAtSupportingFee(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountIn\":\"The address of the vToken contract to repay.\",\"amountOutMin\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapTokensForExactBNB(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.*\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapTokensForExactBNBAndRepay(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapTokensForExactBNBAndSupply(uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"msg.sender should have already given the router an allowance of at least amountIn on the input token.\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.*\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"to\":\"Recipient of the output tokens.\"}},\"swapTokensForExactTokensAndRepay(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapTokensForExactTokensAndSupply(address,uint256,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"amountOut\":\"The amount of the tokens needs to be as output token.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"swapTokensForFullBNBDebtAndRepay(uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\"}},\"swapTokensForFullTokenDebtAndRepay(address,uint256,address[],uint256)\":{\"details\":\"Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address\",\"params\":{\"amountInMax\":\"The maximum amount of input tokens that can be taken for the transaction not to revert.\",\"deadline\":\"Unix timestamp after which the transaction will revert.\",\"path\":\"Array with addresses of the underlying assets to be swapped\",\"vTokenAddress\":\"The address of the vToken contract for supplying assets.\"}},\"sweepToken(address,address,uint256)\":{\"custom:access\":\"Only Governance\",\"params\":{\"sweepAmount\":\"The ampunt of the tokens to sweep\",\"to\":\"Recipient of the output tokens.\",\"token\":\"The address of the ERC-20 token to sweep\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"_status\":{\"details\":\"Guard variable for re-entrancy checks\"}},\"title\":\"Venus's Pancake Swap Integration Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ExcessiveInputAmount(uint256,uint256)\":[{\"notice\":\"Error thrown when amount is above the msg.value(amountMax)\"}],\"IdenticalAddresses()\":[{\"notice\":\"Error thrown if two token addresses are identical\"}],\"InputAmountAboveMaximum(uint256,uint256)\":[{\"notice\":\"Error thrown when the amount In is above the amount in maximum\"}],\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Error thrown when swapRouter's balance is less than sweep amount\"}],\"InsufficientInputAmount()\":[{\"notice\":\"Error thrown where the input amount parameter for a token is 0\"}],\"InsufficientLiquidity()\":[{\"notice\":\"Error thrown when the given reserves are equal to 0\"}],\"InsufficientOutputAmount()\":[{\"notice\":\"Error thrown when the amount out passed is 0\"}],\"InvalidPath()\":[{\"notice\":\"Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)\"}],\"OutputAmountBelowMinimum(uint256,uint256)\":[{\"notice\":\"Error thrown when the amount received from a trade is below the minimum\"}],\"ReentrantCheck()\":[{\"notice\":\"Error thrown when reentrant check fails\"}],\"RepayError(address,address,uint256)\":[{\"notice\":\"Error indicating that repaying to given market failed.\"}],\"SafeApproveFailed()\":[{\"notice\":\"Error thrown when safeApprove failed\"}],\"SafeTransferBNBFailed()\":[{\"notice\":\"Error thrown when safeTransferBNB failed\"}],\"SafeTransferFailed()\":[{\"notice\":\"Error thrown when safeTransfer failed\"}],\"SafeTransferFromFailed()\":[{\"notice\":\"Error thrown when transferFrom failed\"}],\"SupplyError(address,address,uint256)\":[{\"notice\":\"Error indicating that suplying to a given market failed.\"}],\"SwapAmountLessThanAmountOutMin(uint256,uint256)\":[{\"notice\":\"Error thrown when swapamount is less than the amountOutmin\"}],\"SwapDeadlineExpire(uint256,uint256)\":[{\"notice\":\"Error thrown when deadline for swap has expired\"}],\"VTokenNotListed(address)\":[{\"notice\":\"Error thrown when invalid vToken address is passed to swap router\"}],\"VTokenUnderlyingInvalid(address)\":[{\"notice\":\"Error thrown when invalid underlying is passed as per given vToken\"}],\"WrongAddress(address,address)\":[{\"notice\":\"Error indicating wBNB address passed is not the expected one.\"}],\"ZeroAddress()\":[{\"notice\":\"Error thrown if a zero address is passed\"}]},\"events\":{\"SwapBnbForTokens(address,address[],uint256[])\":{\"notice\":\"This event is emitted whenever a successful swap (BNB -> token) occurs\"},\"SwapBnbForTokensAtSupportingFee(address,address[])\":{\"notice\":\"This event is emitted whenever a successful swap (BNB -> token) occurs\"},\"SwapTokensForBnb(address,address[],uint256[])\":{\"notice\":\"This event is emitted whenever a successful swap (token -> BNB) occurs\"},\"SwapTokensForBnbAtSupportingFee(address,address[])\":{\"notice\":\"This event is emitted whenever a successful swap (token -> BNB) occurs\"},\"SwapTokensForTokens(address,address[],uint256[])\":{\"notice\":\"This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\"},\"SwapTokensForTokensAtSupportingFee(address,address[])\":{\"notice\":\"This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\"},\"SweepToken(address,address,uint256)\":{\"notice\":\"event emitted on sweep token success\"},\"VBNBAddressUpdated(address,address)\":{\"notice\":\"event emitted on vBNBAddress update\"}},\"kind\":\"user\",\"methods\":{\"WBNB()\":{\"notice\":\"Address of WBNB contract.\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"factory()\":{\"notice\":\"Address of pancake swap factory contract.\"},\"getAmountIn(uint256,uint256,uint256)\":{\"notice\":\"Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\"},\"getAmountsIn(uint256,address[])\":{\"notice\":\"performs chained getAmountIn calculations on any number of pairs.\"},\"getAmountsOut(uint256,address[])\":{\"notice\":\"performs chained getAmountOut calculations on any number of pairs.\"},\"quote(uint256,uint256,uint256)\":{\"notice\":\"Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\"},\"setVBNBAddress(address)\":{\"notice\":\"Setter for the vBNB address.\"},\"swapBNBForExactTokens(uint256,address[],address,uint256)\":{\"notice\":\"Swaps an as ETH as input tokens for as exact amount of tokens as output,         along the route determined by the path. The first element of path is the input WBNB,         the last is the output as token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapBNBForExactTokensAndRepay(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for Exact tokens and repay to a Venus market\"},\"swapBNBForExactTokensAndSupply(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for Exact tokens and supply to a Venus market\"},\"swapBNBForFullTokenDebtAndRepay(address,address[],uint256)\":{\"notice\":\"Swap BNB for Exact tokens and repay to a Venus market\"},\"swapExactBNBForTokens(uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of BNB for as many output tokens as possible,         along the route determined by the path. The first element of path must be WBNB,         the last is the output token, and any intermediate elements represent         intermediate pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapExactBNBForTokensAndRepay(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for another token and repay a borrow from a Venus market\"},\"swapExactBNBForTokensAndRepayAtSupportingFee(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and repay a borrow from a Venus market\"},\"swapExactBNBForTokensAndSupply(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for another token and supply to a Venus market\"},\"swapExactBNBForTokensAndSupplyAtSupportingFee(address,uint256,address[],uint256)\":{\"notice\":\"Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and supply to a Venus market\"},\"swapExactBNBForTokensAtSupportingFee(uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of ETH for as many output tokens as possible,         along the route determined by the path. The first element of path must be WBNB,         the last is the output token, and any intermediate elements represent         intermediate pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee.\"},\"swapExactTokensForBNB(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output ETH as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapExactTokensForBNBAndRepay(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap Exact tokens for BNB and repay to a Venus market\"},\"swapExactTokensForBNBAndRepayAtSupportingFee(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and repay to a Venus market\"},\"swapExactTokensForBNBAndSupply(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap Exact tokens for BNB and supply to a Venus market\"},\"swapExactTokensForBNBAndSupplyAtSupportingFee(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and supply to a Venus market\"},\"swapExactTokensForBNBAtSupportingFee(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output ETH as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapExactTokensForTokensAndRepay(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap token A for token B and repay a borrow from a Venus market\"},\"swapExactTokensForTokensAndRepayAtSupportingFee(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap deflationary token (a small amount of fee is deducted at the time of transfer of token) token A for token B and repay a borrow from a Venus market\"},\"swapExactTokensForTokensAndSupply(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap token A for token B and supply to a Venus market\"},\"swapExactTokensForTokensAndSupplyAtSupportingFee(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap deflationary (a small amount of fee is deducted at the time of transfer of token) token A for token B and supply to a Venus market.\"},\"swapExactTokensForTokensAtSupportingFee(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee.\"},\"swapTokensForExactBNB(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an as many amount of input tokens for as exact amount of ETH as output,         along the route determined by the path. The first element of path is the input token,         the last is the output as ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapTokensForExactBNBAndRepay(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap tokens for Exact BNB and repay to a Venus market\"},\"swapTokensForExactBNBAndSupply(uint256,uint256,address[],uint256)\":{\"notice\":\"Swap tokens for Exact BNB and supply to a Venus market\"},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an as many amount of input tokens for as exact amount of tokens as output,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).\"},\"swapTokensForExactTokensAndRepay(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap tokens for Exact tokens and repay to a Venus market\"},\"swapTokensForExactTokensAndSupply(address,uint256,uint256,address[],uint256)\":{\"notice\":\"Swap tokens for Exact tokens and supply to a Venus market\"},\"swapTokensForFullBNBDebtAndRepay(uint256,address[],uint256)\":{\"notice\":\"Swap tokens for Exact BNB and repay to a Venus market\"},\"swapTokensForFullTokenDebtAndRepay(address,uint256,address[],uint256)\":{\"notice\":\"Swap tokens for full tokens debt and repay to a Venus market\"},\"sweepToken(address,address,uint256)\":{\"notice\":\"A public function to sweep accidental BEP-20 transfers to this contract. Tokens are sent to the address `to`, provided in input\"}},\"notice\":\"This contracts allows users to swap a token for another one and supply/repay with the latter.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap/SwapRouter.sol\":\"SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Swap/IRouterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IRouterHelper {\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xf039acf6a47a004539c604ce102ebe8b249d92a14e67c81f4bd3b620194c60dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/RouterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./lib/PancakeLibrary.sol\\\";\\nimport \\\"./interfaces/IWBNB.sol\\\";\\nimport \\\"./lib/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/CustomErrors.sol\\\";\\nimport \\\"./IRouterHelper.sol\\\";\\n\\nabstract contract RouterHelper is IRouterHelper {\\n    /// @notice Select the type of Token for which either a supporting fee would be deducted or not at the time of transfer.\\n    enum TypesOfTokens {\\n        NON_SUPPORTING_FEE,\\n        SUPPORTING_FEE\\n    }\\n\\n    /// @notice Address of WBNB contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable WBNB;\\n\\n    /// @notice Address of pancake swap factory contract.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable factory;\\n\\n    // **************\\n    // *** EVENTS ***\\n    // **************\\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\\n    event SwapTokensForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (tokenA -> tokenB) occurs\\n    event SwapTokensForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\\n    event SwapBnbForTokens(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (BNB -> token) occurs\\n    event SwapBnbForTokensAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\\n    event SwapTokensForBnb(address indexed swapper, address[] indexed path, uint256[] indexed amounts);\\n\\n    /// @notice This event is emitted whenever a successful swap (token -> BNB) occurs\\n    event SwapTokensForBnbAtSupportingFee(address indexed swapper, address[] indexed path);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address WBNB_, address factory_) {\\n        if (WBNB_ == address(0) || factory_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        WBNB = WBNB_;\\n        factory = factory_;\\n    }\\n\\n    /**\\n     * @notice Perform swap on the path(pairs)\\n     * @param amounts Araay of amounts of tokens after performing the swap\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param _to Recipient of the output tokens.\\n     */\\n    function _swap(uint256[] memory amounts, address[] memory path, address _to) internal virtual {\\n        for (uint256 i; i < path.length - 1; ) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            IPancakePair(PancakeLibrary.pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n\\n    /**\\n     * @notice Perform swap on the path(pairs) for supporting fee\\n     * @dev requires the initial amount to have already been sent to the first pair\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param _to Recipient of the output tokens.\\n     */\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n        for (uint256 i; i < path.length - 1; ) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = PancakeLibrary.sortTokens(input, output);\\n            IPancakePair pair = IPancakePair(PancakeLibrary.pairFor(factory, input, output));\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\\n                    ? (reserve0, reserve1)\\n                    : (reserve1, reserve0);\\n\\n                uint256 balance = IERC20(input).balanceOf(address(pair));\\n                amountInput = balance - reserveInput;\\n                amountOutput = PancakeLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOutput)\\n                : (amountOutput, uint256(0));\\n            address to = i < path.length - 2 ? PancakeLibrary.pairFor(factory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        address pairAddress = PancakeLibrary.pairFor(factory, path[0], path[1]);\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            TransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amounts[0]);\\n            _swap(amounts, path, to);\\n            emit SwapTokensForTokens(msg.sender, path, amounts);\\n        } else {\\n            TransferHelper.safeTransferFrom(path[0], msg.sender, pairAddress, amountIn);\\n            _swapSupportingFeeOnTransferTokens(path, to);\\n            emit SwapTokensForTokensAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap exact BNB for token\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        address wBNBAddress = WBNB;\\n        if (path[0] != wBNBAddress) {\\n            revert WrongAddress(wBNBAddress, path[0]);\\n        }\\n        IWBNB(wBNBAddress).deposit{ value: msg.value }();\\n        TransferHelper.safeTransfer(wBNBAddress, PancakeLibrary.pairFor(factory, path[0], path[1]), msg.value);\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, msg.value, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            _swap(amounts, path, to);\\n            emit SwapBnbForTokens(msg.sender, path, amounts);\\n        } else {\\n            _swapSupportingFeeOnTransferTokens(path, to);\\n            emit SwapBnbForTokensAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for BNB\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of BNB to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param swapFor TypesOfTokens, either supporing fee or non supporting fee\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     */\\n    function _swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        TypesOfTokens swapFor\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[path.length - 1] != WBNB) {\\n            revert WrongAddress(WBNB, path[path.length - 1]);\\n        }\\n        uint256 WBNBAmount;\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            amounts = PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n            if (amounts[amounts.length - 1] < amountOutMin) {\\n                revert OutputAmountBelowMinimum(amounts[amounts.length - 1], amountOutMin);\\n            }\\n            TransferHelper.safeTransferFrom(\\n                path[0],\\n                msg.sender,\\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            );\\n            _swap(amounts, path, address(this));\\n            WBNBAmount = amounts[amounts.length - 1];\\n        } else {\\n            uint256 balanceBefore = IWBNB(WBNB).balanceOf(address(this));\\n            TransferHelper.safeTransferFrom(\\n                path[0],\\n                msg.sender,\\n                PancakeLibrary.pairFor(factory, path[0], path[1]),\\n                amountIn\\n            );\\n            _swapSupportingFeeOnTransferTokens(path, address(this));\\n            uint256 balanceAfter = IWBNB(WBNB).balanceOf(address(this));\\n            WBNBAmount = balanceAfter - balanceBefore;\\n        }\\n        IWBNB(WBNB).withdraw(WBNBAmount);\\n        if (to != address(this)) {\\n            TransferHelper.safeTransferBNB(to, WBNBAmount);\\n        }\\n        if (swapFor == TypesOfTokens.NON_SUPPORTING_FEE) {\\n            emit SwapTokensForBnb(msg.sender, path, amounts);\\n        } else {\\n            emit SwapTokensForBnbAtSupportingFee(msg.sender, path);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap token A for exact amount of token B\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > amountInMax) {\\n            revert InputAmountAboveMaximum(amounts[0], amountInMax);\\n        }\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n        emit SwapTokensForTokens(msg.sender, path, amounts);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for exact amount of token B\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[0] != WBNB) {\\n            revert WrongAddress(WBNB, path[0]);\\n        }\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > msg.value) {\\n            revert ExcessiveInputAmount(amounts[0], msg.value);\\n        }\\n        IWBNB(WBNB).deposit{ value: amounts[0] }();\\n        TransferHelper.safeTransfer(WBNB, PancakeLibrary.pairFor(factory, path[0], path[1]), amounts[0]);\\n        _swap(amounts, path, to);\\n        // refund dust BNB, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferBNB(msg.sender, msg.value - amounts[0]);\\n        emit SwapBnbForTokens(msg.sender, path, amounts);\\n    }\\n\\n    /**\\n     * @notice Swap token A for exact BNB\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function _swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to\\n    ) internal returns (uint256[] memory amounts) {\\n        if (path[path.length - 1] != WBNB) {\\n            revert WrongAddress(WBNB, path[path.length - 1]);\\n        }\\n        amounts = PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n        if (amounts[0] > amountInMax) {\\n            revert InputAmountAboveMaximum(amounts[amounts.length - 1], amountInMax);\\n        }\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            PancakeLibrary.pairFor(factory, path[0], path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\\n        if (to != address(this)) {\\n            TransferHelper.safeTransferBNB(to, amounts[amounts.length - 1]);\\n        }\\n        emit SwapTokensForBnb(msg.sender, path, amounts);\\n    }\\n\\n    // **** LIBRARY FUNCTIONS ****\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     * @param amountA The amount of token A\\n     * @param reserveA The amount of reserves for token A before swap\\n     * @param reserveB The amount of reserves for token B before swap\\n     * @return amountB An equivalent amount of the token B\\n     **/\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure virtual override returns (uint256 amountB) {\\n        return PancakeLibrary.quote(amountA, reserveA, reserveB);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n     * @param amountIn The amount of token A need to swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountOut The maximum output amount of the token B\\n     **/\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure virtual override returns (uint256 amountOut) {\\n        return PancakeLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     * @param amountOut The amount of token B after swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountIn Required input amount of the token A\\n     **/\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure virtual override returns (uint256 amountIn) {\\n        return PancakeLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\\n    }\\n\\n    /**\\n     * @notice performs chained getAmountOut calculations on any number of pairs.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param path Array with addresses of the underlying assets to be swapped.\\n     */\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) external view virtual override returns (uint256[] memory amounts) {\\n        return PancakeLibrary.getAmountsOut(factory, amountIn, path);\\n    }\\n\\n    /**\\n     * @notice performs chained getAmountIn calculations on any number of pairs.\\n     * @param amountOut amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped.\\n     */\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory path\\n    ) external view virtual override returns (uint256[] memory amounts) {\\n        return PancakeLibrary.getAmountsIn(factory, amountOut, path);\\n    }\\n}\\n\",\"keccak256\":\"0x0627c78d1657222e176e2fe51b8c98307482077a1770b8d47586126b766d234d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPancakeSwapV2Router.sol\\\";\\nimport \\\"./interfaces/IVtoken.sol\\\";\\nimport \\\"./RouterHelper.sol\\\";\\nimport \\\"./interfaces/IVBNB.sol\\\";\\nimport \\\"./interfaces/IVtoken.sol\\\";\\nimport \\\"./interfaces/InterfaceComptroller.sol\\\";\\n\\n/**\\n * @title Venus's Pancake Swap Integration Contract\\n * @notice This contracts allows users to swap a token for another one and supply/repay with the latter.\\n * @dev For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.\\n * @author 0xlucian\\n */\\n\\ncontract SwapRouter is Ownable2Step, RouterHelper, IPancakeSwapV2Router {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable comptrollerAddress;\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n\\n    uint256 private constant _ENTERED = 2;\\n\\n    address public vBNBAddress;\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    uint256 internal _status;\\n\\n    // ***************\\n    // ** MODIFIERS **\\n    // ***************\\n    modifier ensure(uint256 deadline) {\\n        if (deadline < block.timestamp) {\\n            revert SwapDeadlineExpire(deadline, block.timestamp);\\n        }\\n        _;\\n    }\\n\\n    modifier ensurePath(address[] calldata path) {\\n        if (path.length < 2) {\\n            revert InvalidPath();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        if (_status == _ENTERED) {\\n            revert ReentrantCheck();\\n        }\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /// @notice event emitted on sweep token success\\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\\n\\n    /// @notice event emitted on vBNBAddress update\\n    event VBNBAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    // *********************\\n    // **** CONSTRUCTOR ****\\n    // *********************\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address WBNB_,\\n        address factory_,\\n        address _comptrollerAddress,\\n        address _vBNBAddress\\n    ) RouterHelper(WBNB_, factory_) {\\n        if (_comptrollerAddress == address(0) || _vBNBAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        comptrollerAddress = _comptrollerAddress;\\n        _status = _NOT_ENTERED;\\n        vBNBAddress = _vBNBAddress;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WBNB); // only accept BNB via fallback from the WBNB contract\\n    }\\n\\n    // ****************************\\n    // **** EXTERNAL FUNCTIONS ****\\n    // ****************************\\n\\n    /**\\n     * @notice Setter for the vBNB address.\\n     * @param _vBNBAddress Address of the BNB vToken to update.\\n     */\\n    function setVBNBAddress(address _vBNBAddress) external onlyOwner {\\n        if (_vBNBAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        _isVTokenListed(_vBNBAddress);\\n\\n        address oldAddress = vBNBAddress;\\n        vBNBAddress = _vBNBAddress;\\n\\n        emit VBNBAddressUpdated(oldAddress, vBNBAddress);\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     */\\n    function swapExactTokensForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap deflationary (a small amount of fee is deducted at the time of transfer of token) token A for token B and supply to a Venus market.\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     */\\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another token and supply to a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactBNBForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and supply to a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact tokens and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and supply to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _supply(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact tokens for BNB and supply to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndSupply(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and supply to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and supply to a Venus market\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactBNBAndSupply(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        _mintVBNBandTransfer(swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap token A for token B and repay a borrow from a Venus market\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\\n     */\\n    function swapExactTokensForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap deflationary token (a small amount of fee is deducted at the time of transfer of token) token A for token B and repay a borrow from a Venus market\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)\\n     */\\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another token and repay a borrow from a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\\n     */\\n    function swapExactBNBForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and repay a borrow from a Venus market\\n     * @dev The amount to be swapped is obtained from the msg.value, since we are swapping BNB\\n     * @param vTokenAddress The address of the vToken contract to repay.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive\\n     */\\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapExactBNBForTokens(amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, address(this));\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for full tokens debt and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        uint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\\n        _swapTokensForExactTokens(amountOut, amountInMax, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap BNB for Exact tokens and repay to a Venus market\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapBNBForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable override nonReentrant ensure(deadline) ensurePath(path) {\\n        _ensureVTokenChecks(vTokenAddress, path[path.length - 1]);\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(address(this));\\n        uint256 amountOut = IVToken(vTokenAddress).borrowBalanceCurrent(msg.sender);\\n        _swapBNBForExactTokens(amountOut, path, address(this));\\n        uint256 swapAmount = _getSwapAmount(lastAsset, balanceBefore);\\n        _repay(lastAsset, vTokenAddress, swapAmount);\\n    }\\n\\n    /**\\n     * @notice Swap Exact tokens for BNB and repay to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndRepay(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.NON_SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and repay to a Venus market\\n     * @param amountIn The amount of tokens to swap.\\n     * @param amountOutMin Minimum amount of tokens to receive.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, address(this), TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForExactBNBAndRepay(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for Exact BNB and repay to a Venus market\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @dev Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive\\n     * @dev In case of swapping native BNB the first asset in path array should be the wBNB address\\n     */\\n    function swapTokensForFullBNBDebtAndRepay(\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) {\\n        uint256 balanceBefore = address(this).balance;\\n        uint256 amountOut = IVToken(vBNBAddress).borrowBalanceCurrent(msg.sender);\\n        _swapTokensForExactBNB(amountOut, amountInMax, path, address(this));\\n        uint256 balanceAfter = address(this).balance;\\n        uint256 swapAmount = balanceAfter - balanceBefore;\\n        IVBNB(vBNBAddress).repayBorrowBehalf{ value: swapAmount }(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForTokensAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\\n        _swapExactTokensForTokens(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of BNB for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path must be WBNB,\\n     *         the last is the output token, and any intermediate elements represent\\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev amountIn is passed through the msg.value of the transaction\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n        ensure(deadline)\\n        ensurePath(path)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = _swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible,\\n     *         along the route determined by the path. The first element of path must be WBNB,\\n     *         the last is the output token, and any intermediate elements represent\\n     *         intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev amountIn is passed through the msg.value of the transaction\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactBNBForTokensAtSupportingFee(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        address lastAsset = path[path.length - 1];\\n        uint256 balanceBefore = IERC20(lastAsset).balanceOf(to);\\n        _swapExactBNBForTokens(amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        swapAmount = _checkForAmountOut(lastAsset, balanceBefore, amountOutMin, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.NON_SUPPORTING_FEE);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output ETH as possible,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     *         This method to swap deflationary tokens which would require supporting fee.\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountIn The address of the vToken contract to repay.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForBNBAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external override nonReentrant ensure(deadline) ensurePath(path) returns (uint256 swapAmount) {\\n        uint256 balanceBefore = to.balance;\\n        _swapExactTokensForBNB(amountIn, amountOutMin, path, to, TypesOfTokens.SUPPORTING_FEE);\\n        uint256 balanceAfter = to.balance;\\n        swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swaps an as many amount of input tokens for as exact amount of tokens as output,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapTokensForExactTokens(amountOut, amountInMax, path, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an as ETH as input tokens for as exact amount of tokens as output,\\n     *         along the route determined by the path. The first element of path is the input WBNB,\\n     *         the last is the output as token, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        virtual\\n        override\\n        nonReentrant\\n        ensure(deadline)\\n        ensurePath(path)\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = _swapBNBForExactTokens(amountOut, path, to);\\n    }\\n\\n    /**\\n     * @notice Swaps an as many amount of input tokens for as exact amount of ETH as output,\\n     *         along the route determined by the path. The first element of path is the input token,\\n     *         the last is the output as ETH, and any intermediate elements represent intermediate\\n     *         pairs to trade through (if, for example, a direct pair does not exist).\\n     * @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param amountInMax The maximum amount of input tokens that can be taken for the transaction not to revert.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @param to Recipient of the output tokens.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     **/\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override nonReentrant ensure(deadline) ensurePath(path) returns (uint256[] memory amounts) {\\n        amounts = _swapTokensForExactBNB(amountOut, amountInMax, path, to);\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental BEP-20 transfers to this contract. Tokens are sent to the address `to`, provided in input\\n     * @param token The address of the ERC-20 token to sweep\\n     * @param to Recipient of the output tokens.\\n     * @param sweepAmount The ampunt of the tokens to sweep\\n     * @custom:access Only Governance\\n     */\\n    function sweepToken(IERC20 token, address to, uint256 sweepAmount) external onlyOwner nonReentrant {\\n        if (to == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        uint256 balance = token.balanceOf(address(this));\\n        if (sweepAmount > balance) {\\n            revert InsufficientBalance(sweepAmount, balance);\\n        }\\n        token.safeTransfer(to, sweepAmount);\\n\\n        emit SweepToken(address(token), to, sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Supply token to a Venus market\\n     * @param path The addresses of the underlying token\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param swapAmount The amount of tokens supply to Venus Market.\\n     */\\n    function _supply(address path, address vTokenAddress, uint256 swapAmount) internal {\\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\\n        uint256 response = IVToken(vTokenAddress).mintBehalf(msg.sender, swapAmount);\\n        if (response != 0) {\\n            revert SupplyError(msg.sender, vTokenAddress, response);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay a borrow from Venus market\\n     * @param path The addresses of the underlying token\\n     * @param vTokenAddress The address of the vToken contract for supplying assets.\\n     * @param swapAmount The amount of tokens repay to Venus Market.\\n     */\\n    function _repay(address path, address vTokenAddress, uint256 swapAmount) internal {\\n        TransferHelper.safeApprove(path, vTokenAddress, 0);\\n        TransferHelper.safeApprove(path, vTokenAddress, swapAmount);\\n        uint256 response = IVToken(vTokenAddress).repayBorrowBehalf(msg.sender, swapAmount);\\n        if (response != 0) {\\n            revert RepayError(msg.sender, vTokenAddress, response);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if the balance of to minus the balanceBefore is greater or equal to the amountOutMin.\\n     * @param asset The address of the underlying token\\n     * @param balanceBefore Balance before the swap.\\n     * @param amountOutMin Min amount out threshold.\\n     * @param to Recipient of the output tokens.\\n     */\\n    function _checkForAmountOut(\\n        address asset,\\n        uint256 balanceBefore,\\n        uint256 amountOutMin,\\n        address to\\n    ) internal view returns (uint256 swapAmount) {\\n        uint256 balanceAfter = IERC20(asset).balanceOf(to);\\n        swapAmount = balanceAfter - balanceBefore;\\n        if (swapAmount < amountOutMin) {\\n            revert SwapAmountLessThanAmountOutMin(swapAmount, amountOutMin);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the difference between the balance of this and the balanceBefore\\n     * @param asset The address of the underlying token\\n     * @param balanceBefore Balance before the swap.\\n     */\\n    function _getSwapAmount(address asset, uint256 balanceBefore) internal view returns (uint256 swapAmount) {\\n        uint256 balanceAfter = IERC20(asset).balanceOf(address(this));\\n        swapAmount = balanceAfter - balanceBefore;\\n    }\\n\\n    /**\\n     * @notice Check isVTokenListed and last address in the path should be vToken underlying.\\n     * @param vTokenAddress Address of the vToken.\\n     * @param underlying Address of the underlying asset.\\n     */\\n    function _ensureVTokenChecks(address vTokenAddress, address underlying) internal {\\n        _isVTokenListed(vTokenAddress);\\n        if (IVToken(vTokenAddress).underlying() != underlying) {\\n            revert VTokenUnderlyingInvalid(underlying);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check is vToken listed in the pool.\\n     * @param vToken Address of the vToken.\\n     */\\n    function _isVTokenListed(address vToken) internal view {\\n        bool isListed = InterfaceComptroller(comptrollerAddress).markets(vToken);\\n        if (!isListed) {\\n            revert VTokenNotListed(vToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint vBNB tokens to the market then transfer them to user\\n     * @param swapAmount Swapped BNB amount\\n     */\\n    function _mintVBNBandTransfer(uint256 swapAmount) internal {\\n        uint256 vBNBBalanceBefore = IVBNB(vBNBAddress).balanceOf(address(this));\\n        IVBNB(vBNBAddress).mint{ value: swapAmount }();\\n        uint256 vBNBBalanceAfter = IVBNB(vBNBAddress).balanceOf(address(this));\\n        IERC20(vBNBAddress).safeTransfer(msg.sender, (vBNBBalanceAfter - vBNBBalanceBefore));\\n    }\\n}\\n\",\"keccak256\":\"0x9fb9d93e13b53a0d8c9b222a7b25eaedc2224dcdc05cced1c7b6e374b5b39c78\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n// **************\\n// *** ERRORS ***\\n// **************\\n\\n///@notice Error indicating that suplying to a given market failed.\\nerror SupplyError(address supplier, address vToken, uint256 errorCode);\\n\\n///@notice Error indicating that repaying to given market failed.\\nerror RepayError(address repayer, address vToken, uint256 errorCode);\\n\\n///@notice Error indicating wBNB address passed is not the expected one.\\nerror WrongAddress(address expectedAdddress, address passedAddress);\\n\\n///@notice Error thrown when deadline for swap has expired\\nerror SwapDeadlineExpire(uint256 deadline, uint256 timestemp);\\n\\n///@notice Error thrown where the input amount parameter for a token is 0\\nerror InsufficientInputAmount();\\n\\n///@notice Error thrown when the amount out passed is 0\\nerror InsufficientOutputAmount();\\n\\n///@notice Error thrown when the amount received from a trade is below the minimum\\nerror OutputAmountBelowMinimum(uint256 amountOut, uint256 amountOutMin);\\n\\n///@notice Error thrown when the amount In is above the amount in maximum\\nerror InputAmountAboveMaximum(uint256 amountIn, uint256 amountIntMax);\\n\\n///@notice Error thrown when amount is above the msg.value(amountMax)\\nerror ExcessiveInputAmount(uint256 amount, uint256 amountMax);\\n\\n///@notice Error thrown when the given reserves are equal to 0\\nerror InsufficientLiquidity();\\n\\n///@notice Error thrown if a zero address is passed\\nerror ZeroAddress();\\n\\n///@notice Error thrown if two token addresses are identical\\nerror IdenticalAddresses();\\n\\n///@notice Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)\\nerror InvalidPath();\\n\\n///@notice Error thrown when invalid vToken address is passed to swap router\\nerror VTokenNotListed(address vToken);\\n\\n///@notice Error thrown when invalid underlying is passed as per given vToken\\nerror VTokenUnderlyingInvalid(address underlying);\\n\\n///@notice Error thrown when swapamount is less than the amountOutmin\\nerror SwapAmountLessThanAmountOutMin(uint256 swapAmount, uint256 amountOutMin);\\n\\n///@notice Error thrown when swapRouter's balance is less than sweep amount\\nerror InsufficientBalance(uint256 sweepAmount, uint256 balance);\\n\\n///@notice Error thrown when safeApprove failed\\nerror SafeApproveFailed();\\n\\n///@notice Error thrown when safeTransfer failed\\nerror SafeTransferFailed();\\n\\n///@notice Error thrown when transferFrom failed\\nerror SafeTransferFromFailed();\\n\\n///@notice Error thrown when safeTransferBNB failed\\nerror SafeTransferBNBFailed();\\n\\n///@notice Error thrown when reentrant check fails\\nerror ReentrantCheck();\\n\",\"keccak256\":\"0x178ea08cc466fdc343adbd7114dac26b781210c80406a218873e5dab3675e31f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x4ed358145b3d535e6d2b9310f8ee96ee0926a5a551143e08431bc9bb3f57368e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/IPancakeSwapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IPancakeSwapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 swapAmount);\\n\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactBNBForTokensAtSupportingFee(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 swapAmount);\\n\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForBNBAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 swapAmount);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactBNBForTokensAndSupplyAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapTokensForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForExactTokensAndSupply(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBAndSupply(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForBNBAndSupplyAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForExactBNBAndSupply(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactBNBForTokensAndRepayAtSupportingFee(\\n        address vTokenAddress,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapTokensForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForFullTokenDebtAndRepay(\\n        address vTokenAddress,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapBNBForExactTokensAndRepay(\\n        address vTokenAddress,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBAndRepay(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForBNBAndRepayAtSupportingFee(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForExactBNBAndRepay(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForFullBNBDebtAndRepay(uint256 amountInMax, address[] calldata path, uint256 deadline) external;\\n}\\n\",\"keccak256\":\"0xbff9fde0f4e28245da94d04b56f3b5d0805aacf059e800b065c09bb9d40ae1cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/IVBNB.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IVBNB {\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function mint() external payable;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aaac5a018fd0cd0f1cae722d9f6a3ff40584cca2ff0a17bdd6f696d8a88df94\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/IVtoken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IVToken {\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function underlying() external returns (address);\\n}\\n\",\"keccak256\":\"0x9113f330f303f2c5d263c24cf2a0f8f2c834b681fc21c207a222e1e8d4fcc2d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/interfaces/IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface IWBNB {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xcd4207dcd8355b87ff98ad35fd229f5279b3d51138d5f575caa380e22ca252ab\",\"license\":\"BSD-3-Clause\"},\"contracts/Swap/interfaces/InterfaceComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface InterfaceComptroller {\\n    function markets(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe5fa6547251fa33e1441f7409d64981a921ecc2e339d8f944d94ab25db5c0c64\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/lib/PancakeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/CustomErrors.sol\\\";\\n\\nlibrary PancakeLibrary {\\n    /**\\n     * @notice Used to handle return values from pairs sorted in this order\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return token0 token1 Sorted token addresses\\n     **/\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        if (tokenA == tokenB) {\\n            revert IdenticalAddresses();\\n        }\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        if (token0 == address(0)) {\\n            revert ZeroAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the CREATE2 address for a pair without making any external calls\\n     * @param factory Address of the pancake swap factory\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return pair Address for a pair\\n     **/\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Fetches and sorts the reserves for a pair\\n     * @param factory Address of the pancake swap factory\\n     * @param tokenA The address of token A\\n     * @param tokenB The address of token B\\n     * @return reserveA reserveB Reserves for the token A and token B\\n     **/\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        address pairAddress = pairFor(factory, tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(pairAddress).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n     * @param amountA The amount of token A\\n     * @param reserveA The amount of reserves for token A before swap\\n     * @param reserveB The amount of reserves for token B before swap\\n     * @return amountB An equivalent amount of the token B\\n     **/\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        if (amountA == 0) {\\n            revert InsufficientInputAmount();\\n        } else if (reserveA == 0 || reserveB == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n     * @param amountIn The amount of token A need to swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountOut The maximum output amount of the token B\\n     **/\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        if (amountIn == 0) {\\n            revert InsufficientInputAmount();\\n        } else if (reserveIn == 0 || reserveOut == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        uint256 amountInWithFee = amountIn * 9975;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * 10000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     * @param amountOut The amount of token B after swap\\n     * @param reserveIn The amount of reserves for token A before swap\\n     * @param reserveOut The amount of reserves for token B after swap\\n     * @return amountIn Required input amount of the token A\\n     **/\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        if (amountOut == 0) {\\n            revert InsufficientOutputAmount();\\n        } else if (reserveIn == 0 || reserveOut == 0) {\\n            revert InsufficientLiquidity();\\n        }\\n        uint256 numerator = reserveIn * amountOut * 10000;\\n        uint256 denominator = (reserveOut - amountOut) * 9975;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations on any number of pairs\\n     * @param factory Address of the pancake swap factory\\n     * @param amountIn The amount of tokens to swap.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        if (path.length <= 1) {\\n            revert InvalidPath();\\n        }\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; ) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations on any number of pairs\\n     * @param factory Address of the pancake swap factory\\n     * @param amountOut The amount of the tokens needs to be as output token.\\n     * @param path Array with addresses of the underlying assets to be swapped\\n     * @return amounts Array of amounts after performing swap for respective pairs in path\\n     **/\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        if (path.length <= 1) {\\n            revert InvalidPath();\\n        }\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; ) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n            unchecked {\\n                i -= 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa338489bf47330843029e2255b633fa26cfa7674b15c5c041539e0bc09c45490\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Swap/lib/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/CustomErrors.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    /**\\n     * @dev `value` as the allowance of `spender` over the caller's tokens.\\n     * @param token Address of the token\\n     * @param to Address of the spender\\n     * @param value Amount as allowance\\n     */\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeApproveFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     * @param token Address of the token\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     * @param token Address of the token\\n     * @param from Address of the asset'sowner\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) {\\n            revert SafeTransferFromFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `BNB` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     * @param to Address of the receiver\\n     * @param value Amount need to transfer\\n     */\\n    function safeTransferBNB(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        if (!success) {\\n            revert SafeTransferBNBFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11d3e4538c4e26a45fb3b441e5f704ca88394ea141bd88d4b8fbca0a3e6b39ea\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200617c3803806200617c83398101604081905262000034916200018e565b83836200004133620000f7565b6001600160a01b03821615806200005f57506001600160a01b038116155b156200007e5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03918216608052811660a05282161580620000a757506001600160a01b038116155b15620000c65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0391821660c0526001600355600280546001600160a01b0319169190921617905550620001eb9050565b600180546001600160a01b03191690556200011e8162000121602090811b62002b9b17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200018957600080fd5b919050565b60008060008060808587031215620001a557600080fd5b620001b08562000171565b9350620001c06020860162000171565b9250620001d06040860162000171565b9150620001e06060860162000171565b905092959194509250565b60805160a05160c051615e7a62000302600039600081816104a301526143a701526000818161071d01528181610daa015281816127fa01528181612e0e01528181612f82015281816132500152818161333e0152818161373e01528181613844015281816139dc01528181613c7701528181613cc90152818161407e015281816140fc0152818161457c01528181614d6001528181614db00152818161522401526153d10152600081816102910152818161062a01528181612d3601528181612d9601528181612ecd01528181612f5e01528181613683015281816136e40152818161393601528181613a9201528181613b2c01528181613fb0015281816144ea0152818161454b015261466f0152615e7a6000f3fe6080604052600436106102815760003560e01c806385f8c2591161014f578063ad615dec116100c1578063d67b571e1161007a578063d67b571e1461079f578063e30c3978146107bf578063f0177c88146107dd578063f2fde38b146107fd578063f7a38f9a1461081d578063fd0a07ec1461083d57600080fd5b8063ad615dec146106d8578063bfc976da146106f8578063c45a01551461070b578063ca9a16ab1461073f578063d06ca61f1461075f578063d07dc71e1461077f57600080fd5b806390c8e6fc1161011357806390c8e6fc1461064c5780639203fd531461065f5780639cf689111461067f5780639d818ede14610692578063a87c98d8146106a5578063abdf018f146106c557600080fd5b806385f8c2591461059a5780638803dbee146105ba57806389db0896146105da5780638da5cb5b146105fa5780638dd950021461061857600080fd5b806359b1461d116101f3578063715018a6116101ac578063715018a6146104fd5780637256cace14610512578063767b047a1461053257806379ba5097146105525780637ba5a244146105675780638332a9631461058757600080fd5b806359b1461d1461041e5780635d616c5b14610431578063639219ac1461045157806364aff9ec1461047157806368bde41f146104915780636c770162146104dd57600080fd5b806320902a0f1161024557806320902a0f1461037857806321c2ddee1461039857806338ed1739146103ab5780634b2b38bb146103cb5780634d1d45b5146103eb5780634d5705aa146103fe57600080fd5b8063054d50d4146102c557806309d25c42146102f85780630a68f4fd1461030b57806316a806001461032b5780631f00ca741461034b57600080fd5b366102c057336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102be576102be6156f5565b005b600080fd5b3480156102d157600080fd5b506102e56102e036600461570b565b61085d565b6040519081526020015b60405180910390f35b6102be6103063660046157a1565b610872565b34801561031757600080fd5b506102be6103263660046157fd565b610a76565b34801561033757600080fd5b506102be61034636600461586f565b610bde565b34801561035757600080fd5b5061036b6103663660046158e9565b610da3565b6040516102ef91906159ba565b34801561038457600080fd5b506102be6103933660046159fe565b610dd7565b6102be6103a636600461586f565b610f0e565b3480156103b757600080fd5b5061036b6103c6366004615a3b565b611062565b3480156103d757600080fd5b506102be6103e63660046157fd565b611100565b6102be6103f936600461586f565b61123d565b34801561040a57600080fd5b506102be6104193660046157fd565b611391565b6102be61042c36600461586f565b6114ea565b34801561043d57600080fd5b5061036b61044c366004615a3b565b611635565b34801561045d57600080fd5b506102be61046c3660046157fd565b6116c0565b34801561047d57600080fd5b506102be61048c366004615aae565b611808565b34801561049d57600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ef565b3480156104e957600080fd5b506102be6104f83660046157fd565b611963565b34801561050957600080fd5b506102be611aaf565b34801561051e57600080fd5b506102be61052d366004615aef565b611ac3565b34801561053e57600080fd5b506102e561054d366004615a3b565b611b4d565b34801561055e57600080fd5b506102be611c9f565b34801561057357600080fd5b506102be6105823660046157fd565b611d19565b61036b610595366004615b0c565b611e56565b3480156105a657600080fd5b506102e56105b536600461570b565b611ef0565b3480156105c657600080fd5b5061036b6105d5366004615a3b565b611efd565b3480156105e657600080fd5b506102be6105f53660046159fe565b611f86565b34801561060657600080fd5b506000546001600160a01b03166104c5565b34801561062457600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b6102e561065a366004615b0c565b612051565b34801561066b57600080fd5b506102be61067a366004615b73565b6121a1565b61036b61068d366004615b0c565b6122ab565b6102be6106a036600461586f565b612335565b3480156106b157600080fd5b506002546104c5906001600160a01b031681565b6102be6106d336600461586f565b612471565b3480156106e457600080fd5b506102e56106f336600461570b565b6125ad565b6102be61070636600461586f565b6125ba565b34801561071757600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b34801561074b57600080fd5b506102e561075a366004615a3b565b612705565b34801561076b57600080fd5b5061036b61077a3660046158e9565b6127f3565b34801561078b57600080fd5b506102be61079a3660046159fe565b612820565b3480156107ab57600080fd5b5061036b6107ba366004615a3b565b6128a8565b3480156107cb57600080fd5b506001546001600160a01b03166104c5565b3480156107e957600080fd5b506102be6107f83660046159fe565b612931565b34801561080957600080fd5b506102be610818366004615aef565b6129d2565b34801561082957600080fd5b506102be6108383660046159fe565b612a43565b34801561084957600080fd5b506102be6108583660046159fe565b612b11565b600061086a848484612beb565b949350505050565b60026003540361089557604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156108cd5760405160016238016d60e11b03198152600481018290524260248201526044015b60405180910390fd5b838360028110156108f1576040516320db826760e01b815260040160405180910390fd5b61092b878787610902600182615bbd565b81811061091157610911615bd4565b90506020020160208101906109269190615aef565b612c85565b6000868661093a600182615bbd565b81811061094957610949615bd4565b905060200201602081019061095e9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190615bea565b6040516305eff7ef60e21b81523360048201529091506000906001600160a01b038b16906317bfdfbc906024016020604051808303816000875af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190615bea565b9050610a4a818a8a30612d32565b506000610a578484613106565b9050610a64848c8361317f565b50506001600355505050505050505050565b600260035403610a9957604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610acc5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610af0576040516320db826760e01b815260040160405180910390fd5b610b01898787610902600182615bbd565b60008686610b10600182615bbd565b818110610b1f57610b1f615bd4565b9050602002016020810190610b349190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba29190615bea565b9050610bb18a8a8a8a30613249565b506000610bbe8383613106565b9050610bcb838d83613458565b5050600160035550505050505050505050565b600260035403610c0157604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610c345760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610c58576040516320db826760e01b815260040160405180910390fd5b610c69888787610902600182615bbd565b60008686610c78600182615bbd565b818110610c8757610c87615bd4565b9050602002016020810190610c9c9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190615bea565b6040516305eff7ef60e21b81523360048201529091506000906001600160a01b038c16906317bfdfbc906024016020604051808303816000875af1158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a9190615bea565b9050610d89818b8b8b30613249565b506000610d968484613106565b9050610bcb848d8361317f565b6060610dd07f0000000000000000000000000000000000000000000000000000000000000000848461351c565b9392505050565b600260035403610dfa57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610e2d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610e51576040516320db826760e01b815260040160405180910390fd5b47610e6189898989306001613677565b50476000610e6f8383615bbd565b905089811015610e9c5760405163a9c7376b60e01b815260048101829052602481018b90526044016108c4565b60025460405163e597461960e01b81523360048201526001600160a01b039091169063e59746199083906024015b6000604051808303818588803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505060016003555050505050505050505050505050565b600260035403610f3157604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610f645760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610f88576040516320db826760e01b815260040160405180910390fd5b610f99888787610902600182615bbd565b60008686610fa8600182615bbd565b818110610fb757610fb7615bd4565b9050602002016020810190610fcc9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190615bea565b905061104889898930612d32565b5060006110558383613106565b9050610a64838c83613458565b606060026003540361108757604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156110ba5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156110de576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6000613c6e565b60016003559a9950505050505050505050565b60026003540361112357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156111565760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561117a576040516320db826760e01b815260040160405180910390fd5b61118b898787610902600182615bbd565b6000868661119a600182615bbd565b8181106111a9576111a9615bd4565b90506020020160208101906111be9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190615bea565b9050610bb18a8a8a8a306000613c6e565b60026003540361126057604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156112935760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156112b7576040516320db826760e01b815260040160405180910390fd5b6112c8888787610902600182615bbd565b600086866112d7600182615bbd565b8181106112e6576112e6615bd4565b90506020020160208101906112fb9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190615bea565b905061137789898930612d32565b5060006113848383613106565b9050610a64838c8361317f565b6002600354036113b457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156113e75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561140b576040516320db826760e01b815260040160405180910390fd5b61141c898787610902600182615bbd565b6000868661142b600182615bbd565b81811061143a5761143a615bd4565b905060200201602081019061144f9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd9190615bea565b90506114ce8a8a8a8a306001613c6e565b5060006114dd83838c30613efb565b9050610bcb838d8361317f565b60026003540361150d57604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156115405760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015611564576040516320db826760e01b815260040160405180910390fd5b611575888787610902600182615bbd565b60008686611584600182615bbd565b81811061159357611593615bd4565b90506020020160208101906115a89190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116169190615bea565b9050611626898989306001613fac565b50600061105583838c30613efb565b606060026003540361165a57604051638aaffc5f60e01b815260040160405180910390fd5b6002600355814281101561168d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156116b1576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6000613677565b6002600354036116e357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156117165760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561173a576040516320db826760e01b815260040160405180910390fd5b61174b898787610902600182615bbd565b6000868661175a600182615bbd565b81811061176957611769615bd4565b905060200201602081019061177e9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190615bea565b90506117fb8a8a8a8a30613249565b5060006114dd8383613106565b6118106142bb565b60026003540361183357604051638aaffc5f60e01b815260040160405180910390fd5b60026003556001600160a01b03821661185f5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190615bea565b9050808211156118f75760405163cf47918160e01b815260048101839052602481018290526044016108c4565b61190b6001600160a01b0385168484614315565b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161195091815260200190565b60405180910390a3505060016003555050565b60026003540361198657604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156119b95760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156119dd576040516320db826760e01b815260040160405180910390fd5b6119ee898787610902600182615bbd565b600086866119fd600182615bbd565b818110611a0c57611a0c615bd4565b9050602002016020810190611a219190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8f9190615bea565b9050611aa08a8a8a8a306001613c6e565b506000610bbe83838c30613efb565b611ab76142bb565b611ac1600061436c565b565b611acb6142bb565b6001600160a01b038116611af25760405163d92e233d60e01b815260040160405180910390fd5b611afb81614385565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3b7bd5f093220d445620b70570146c9dafb968654b4d2cd5c0bbdc2cfea35e6290600090a35050565b6000600260035403611b7257604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611ba55760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611bc9576040516320db826760e01b815260040160405180910390fd5b60008888611bd8600182615bbd565b818110611be757611be7615bd4565b9050602002016020810190611bfc9190615aef565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c9190615bea565b9050611c7d8c8c8c8c8c6001613c6e565b50611c8a82828d8b613efb565b60016003559c9b505050505050505050505050565b60015433906001600160a01b03168114611d0d5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016108c4565b611d168161436c565b50565b600260035403611d3c57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015611d6f5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015611d93576040516320db826760e01b815260040160405180910390fd5b611da4898787610902600182615bbd565b60008686611db3600182615bbd565b818110611dc257611dc2615bd4565b9050602002016020810190611dd79190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e459190615bea565b90506117fb8a8a8a8a306000613c6e565b6060600260035403611e7b57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611eae5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611ed2576040516320db826760e01b815260040160405180910390fd5b611ede89898989612d32565b60016003559998505050505050505050565b600061086a84848461443f565b6060600260035403611f2257604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611f555760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611f79576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a613249565b600260035403611fa957604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015611fdc5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612000576040516320db826760e01b815260040160405180910390fd5b4761201089898989306000613677565b5047600061201e8383615bbd565b60025460405163e597461960e01b81523360048201529192506001600160a01b03169063e5974619908390602401610eca565b600060026003540361207657604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156120a95760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156120cd576040516320db826760e01b815260040160405180910390fd5b600088886120dc600182615bbd565b8181106120eb576120eb615bd4565b90506020020160208101906121009190615aef565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190615bea565b90506121808b8b8b8b6001613fac565b5061218d82828d8b613efb565b60016003559b9a5050505050505050505050565b6002600354036121c457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156121f75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561221b576040516320db826760e01b815260040160405180910390fd5b6002546040516305eff7ef60e21b815233600482015247916000916001600160a01b03909116906317bfdfbc906024016020604051808303816000875af115801561226a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228e9190615bea565b905061229d818a8a8a306144de565b5047600061201e8483615bbd565b60606002600354036122d057604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156123035760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612327576040516320db826760e01b815260040160405180910390fd5b611ede898989896000613fac565b60026003540361235857604051638aaffc5f60e01b815260040160405180910390fd5b6002600355804281101561238b5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156123af576040516320db826760e01b815260040160405180910390fd5b6123c0888787610902600182615bbd565b600086866123cf600182615bbd565b8181106123de576123de615bd4565b90506020020160208101906123f39190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561243d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124619190615bea565b9050611377898989306000613fac565b60026003540361249457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156124c75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156124eb576040516320db826760e01b815260040160405180910390fd5b6124fc888787610902600182615bbd565b6000868661250b600182615bbd565b81811061251a5761251a615bd4565b905060200201602081019061252f9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190615bea565b9050611048898989306000613fac565b600061086a8484846147b4565b6002600354036125dd57604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156126105760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612634576040516320db826760e01b815260040160405180910390fd5b612645888787610902600182615bbd565b60008686612654600182615bbd565b81811061266357612663615bd4565b90506020020160208101906126789190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e69190615bea565b90506126f6898989306001613fac565b50600061138483838c30613efb565b600060026003540361272a57604051638aaffc5f60e01b815260040160405180910390fd5b6002600355814281101561275d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612781576040516320db826760e01b815260040160405180910390fd5b6001600160a01b0386163161279b8b8b8b8b8b6001613677565b506001600160a01b038716316127b18282615bbd565b95508a8610156127de5760405163a9c7376b60e01b815260048101879052602481018c90526044016108c4565b50506001600355509198975050505050505050565b6060610dd07f00000000000000000000000000000000000000000000000000000000000000008484614815565b60026003540361284357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156128765760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561289a576040516320db826760e01b815260040160405180910390fd5b4761201089898989306144de565b60606002600354036128cd57604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156129005760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612924576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6144de565b60026003540361295457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156129875760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156129ab576040516320db826760e01b815260040160405180910390fd5b476129b989898989306144de565b504760006129c78383615bbd565b9050610a648161494f565b6129da6142bb565b600180546001600160a01b0383166001600160a01b03199091168117909155612a0b6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600260035403612a6657604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015612a995760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612abd576040516320db826760e01b815260040160405180910390fd5b47612acd89898989306001613677565b50476000612adb8383615bbd565b905089811015612b085760405163a9c7376b60e01b815260048101829052602481018b90526044016108c4565b610a648161494f565b600260035403612b3457604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015612b675760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612b8b576040516320db826760e01b815260040160405180910390fd5b476129b989898989306000613677565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600083600003612c0e5760405163098fb56160e01b815260040160405180910390fd5b821580612c19575081155b15612c375760405163bb55fd2760e01b815260040160405180910390fd5b6000612c45856126f7615c03565b90506000612c538483615c03565b9050600082612c6487612710615c03565b612c6e9190615c22565b9050612c7a8183615c3a565b979650505050505050565b612c8e82614385565b806001600160a01b0316826001600160a01b0316636f307dc36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfc9190615c5c565b6001600160a01b031614612d2e57604051633179cb1b60e01b81526001600160a01b03821660048201526024016108c4565b5050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684846000818110612d7157612d71615bd4565b9050602002016020810190612d869190615aef565b6001600160a01b031614612e09577f000000000000000000000000000000000000000000000000000000000000000084846000818110612dc857612dc8615bd4565b9050602002016020810190612ddd9190615aef565b6040516306c9abc360e51b81526001600160a01b039283166004820152911660248201526044016108c4565b612e677f00000000000000000000000000000000000000000000000000000000000000008686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b90503481600081518110612e7d57612e7d615bd4565b60200260200101511115612ecb5780600081518110612e9e57612e9e615bd4565b602002602001015134604051634c67496b60e01b81526004016108c4929190918252602082015260400190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db082600081518110612f0d57612f0d615bd4565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f4057600080fd5b505af1158015612f54573d6000803e3d6000fd5b50505050506130167f0000000000000000000000000000000000000000000000000000000000000000612ff67f000000000000000000000000000000000000000000000000000000000000000087876000818110612fb457612fb4615bd4565b9050602002016020810190612fc99190615aef565b88886001818110612fdc57612fdc615bd4565b9050602002016020810190612ff19190615aef565b614ab9565b8360008151811061300957613009615bd4565b6020026020010151614b91565b61305581858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c7d915050565b8060008151811061306857613068615bd4565b60200260200101513411156130a6576130a6338260008151811061308e5761308e615bd4565b6020026020010151346130a19190615bbd565b614e77565b806040516130b49190615c79565b604051809103902084846040516130cc929190615caf565b6040519081900381209033907fd915ae718505164a3760797139ea5eb1916b38e2345ce693e42b4c66d03185f790600090a4949350505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa15801561314f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131739190615bea565b905061086a8382615bbd565b61318b83836000614f05565b613196838383614f05565b6040516304c11f0360e31b8152336004820152602481018290526000906001600160a01b03841690632608f818906044016020604051808303816000875af11580156131e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320a9190615bea565b905080156132435760405163bf1ec74d60e01b81523360048201526001600160a01b0384166024820152604481018290526064016108c4565b50505050565b60606132a97f00000000000000000000000000000000000000000000000000000000000000008786868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b905084816000815181106132bf576132bf615bd4565b6020026020010151111561330d57806000815181106132e0576132e0615bd4565b60200260200101518560405163073dfe8160e01b81526004016108c4929190918252602082015260400190565b6133b88484600081811061332357613323615bd4565b90506020020160208101906133389190615aef565b336133987f00000000000000000000000000000000000000000000000000000000000000008888600081811061337057613370615bd4565b90506020020160208101906133859190615aef565b89896001818110612fdc57612fdc615bd4565b846000815181106133ab576133ab615bd4565b6020026020010151614fea565b6133f781858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c7d915050565b806040516134059190615c79565b6040518091039020848460405161341d929190615caf565b6040519081900381209033907fe3466e1395ff69c1cf0afa58afcf34fe012461c9c1c51b9fbcffd27abc2c9f0d90600090a495945050505050565b61346483836000614f05565b61346f838383614f05565b6040516323323e0360e01b8152336004820152602481018290526000906001600160a01b038416906323323e03906044016020604051808303816000875af11580156134bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e39190615bea565b9050801561324357604051630980ff1960e11b81523360048201526001600160a01b0384166024820152604481018290526064016108c4565b60606001825111613540576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561355a5761355a6158d3565b604051908082528060200260200182016040528015613583578160200160208202803683370190505b5090508281600183516135969190615bbd565b815181106135a6576135a6615bd4565b6020026020010181815250506000600183516135c29190615bbd565b90505b801561366f5760008061361587866135de600187615bbd565b815181106135ee576135ee615bd4565b602002602001015187868151811061360857613608615bd4565b60200260200101516150df565b9150915061363d84848151811061362e5761362e615bd4565b6020026020010151838361443f565b84613649600186615bbd565b8151811061365957613659615bd4565b60209081029190910101525050600019016135c5565b509392505050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856136b0600182615bbd565b8181106136bf576136bf615bd4565b90506020020160208101906136d49190615aef565b6001600160a01b03161461371f577f00000000000000000000000000000000000000000000000000000000000000008585613710600182615bbd565b818110612dc857612dc8615bd4565b60008083600181111561373457613734615cf1565b0361391e576137977f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b91508682600184516137a99190615bbd565b815181106137b9576137b9615bd4565b602002602001015110156138135781600183516137d69190615bbd565b815181106137e6576137e6615bd4565b6020026020010151876040516304ffe56760e21b81526004016108c4929190918252602082015260400190565b6138b18686600081811061382957613829615bd4565b905060200201602081019061383e9190615aef565b3361389e7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061387657613876615bd4565b905060200201602081019061388b9190615aef565b8b8b6001818110612fdc57612fdc615bd4565b856000815181106133ab576133ab615bd4565b6138f082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614c7d915050565b81600183516138ff9190615bbd565b8151811061390f5761390f615bd4565b60200260200101519050613b16565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a99190615bea565b9050613a3c878760008181106139c1576139c1615bd4565b90506020020160208101906139d69190615aef565b33613a367f00000000000000000000000000000000000000000000000000000000000000008b8b6000818110613a0e57613a0e615bd4565b9050602002016020810190613a239190615aef565b8c8c6001818110612fdc57612fdc615bd4565b8c614fea565b613a7a8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506151af915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b059190615bea565b9050613b118282615bbd565b925050505b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015613b7857600080fd5b505af1158015613b8c573d6000803e3d6000fd5b505050506001600160a01b0384163014613baa57613baa8482614e77565b6000836001811115613bbe57613bbe615cf1565b03613c205781604051613bd19190615c79565b60405180910390208686604051613be9929190615caf565b6040519081900381209033907f45ab08259ee5e98858bfa51e8a42d8f236ab50b3ee90baba6b07e955f2a5be0d90600090a4613c63565b8585604051613c30929190615caf565b6040519081900381209033907fc89d4f51067ab4d2e150bc5d21eb14bc9a7b162cefceefcdd9e60f2a2aaf046b90600090a35b509695505050505050565b60606000613ca97f000000000000000000000000000000000000000000000000000000000000000087876000818110612fb457612fb4615bd4565b90506000836001811115613cbf57613cbf615cf1565b03613e3d57613d227f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b9150868260018451613d349190615bbd565b81518110613d4457613d44615bd4565b60200260200101511015613d615781600183516137d69190615bbd565b613da186866000818110613d7757613d77615bd4565b9050602002016020810190613d8c9190615aef565b3383856000815181106133ab576133ab615bd4565b613de082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250614c7d915050565b81604051613dee9190615c79565b60405180910390208686604051613e06929190615caf565b6040519081900381209033907fe3466e1395ff69c1cf0afa58afcf34fe012461c9c1c51b9fbcffd27abc2c9f0d90600090a4613c63565b613e7086866000818110613e5357613e53615bd4565b9050602002016020810190613e689190615aef565b33838b614fea565b613eae8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506151af915050565b8585604051613ebe929190615caf565b6040519081900381209033907f1c0e4e880c96a60f75a8441625b27804db4aaeeeb1dee519a3ef4ea697156bce90600090a3509695505050505050565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918716906370a0823190602401602060405180830381865afa158015613f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6a9190615bea565b9050613f768582615bbd565b915083821015613fa35760405163a9c7376b60e01b815260048101839052602481018590526044016108c4565b50949350505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381168686600081613fea57613fea615bd4565b9050602002016020810190613fff9190615aef565b6001600160a01b031614614021578086866000818110612dc857612dc8615bd4565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561405c57600080fd5b505af1158015614070573d6000803e3d6000fd5b50505050506140de816140d87f0000000000000000000000000000000000000000000000000000000000000000898960008181106140b0576140b0615bd4565b90506020020160208101906140c59190615aef565b8a8a6001818110612fdc57612fdc615bd4565b34614b91565b60008360018111156140f2576140f2615cf1565b03614230576141557f00000000000000000000000000000000000000000000000000000000000000003488888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b91508682600184516141679190615bbd565b8151811061417757614177615bd4565b602002602001015110156141945781600183516137d69190615bbd565b6141d382878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250614c7d915050565b816040516141e19190615c79565b604051809103902086866040516141f9929190615caf565b6040519081900381209033907fd915ae718505164a3760797139ea5eb1916b38e2345ce693e42b4c66d03185f790600090a46142b1565b61426e8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506151af915050565b858560405161427e929190615caf565b6040519081900381209033907fb9f737c4359d1238f35c1e5e0dd7425e3e3211a434a09676b4459fa07a26b57990600090a35b5095945050505050565b6000546001600160a01b03163314611ac15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c4565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052614367908490615485565b505050565b600180546001600160a01b0319169055611d1681612b9b565b604051638e8f294b60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401602060405180830381865afa1580156143f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144149190615d07565b905080612d2e576040516349660aeb60e01b81526001600160a01b03831660048201526024016108c4565b600083600003614462576040516342301c2360e01b815260040160405180910390fd5b82158061446d575081155b1561448b5760405163bb55fd2760e01b815260040160405180910390fd5b60006144978585615c03565b6144a390612710615c03565b905060006144b18685615bbd565b6144bd906126f7615c03565b90506144c98183615c3a565b6144d4906001615c22565b9695505050505050565b60606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484614517600182615bbd565b81811061452657614526615bd4565b905060200201602081019061453b9190615aef565b6001600160a01b031614614577577f00000000000000000000000000000000000000000000000000000000000000008484613710600182615bbd565b6145d57f00000000000000000000000000000000000000000000000000000000000000008786868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b905084816000815181106145eb576145eb615bd4565b602002602001015111156146185780600182516146089190615bbd565b815181106132e0576132e0615bd4565b61462e8484600081811061332357613323615bd4565b61466d81858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614c7d915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82600184516146ab9190615bbd565b815181106146bb576146bb615bd4565b60200260200101516040518263ffffffff1660e01b81526004016146e191815260200190565b600060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b505050506001600160a01b0382163014614753576147538282600184516147369190615bbd565b8151811061474657614746615bd4565b6020026020010151614e77565b806040516147619190615c79565b60405180910390208484604051614779929190615caf565b6040519081900381209033907f45ab08259ee5e98858bfa51e8a42d8f236ab50b3ee90baba6b07e955f2a5be0d90600090a495945050505050565b6000836000036147d75760405163098fb56160e01b815260040160405180910390fd5b8215806147e2575081155b156148005760405163bb55fd2760e01b815260040160405180910390fd5b8261480b8386615c03565b61086a9190615c3a565b60606001825111614839576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff811115614853576148536158d3565b60405190808252806020026020018201604052801561487c578160200160208202803683370190505b509050828160008151811061489357614893615bd4565b60200260200101818152505060005b600183516148b09190615bbd565b81101561366f576000806148f6878685815181106148d0576148d0615bd4565b6020026020010151878660016148e69190615c22565b8151811061360857613608615bd4565b9150915061491e84848151811061490f5761490f615bd4565b60200260200101518383612beb565b8461492a856001615c22565b8151811061493a5761493a615bd4565b602090810291909101015250506001016148a2565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015614998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149bc9190615bea565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316631249c58b836040518263ffffffff1660e01b81526004016000604051808303818588803b158015614a0e57600080fd5b505af1158015614a22573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015614a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a969190615bea565b905061436733614aa68484615bbd565b6002546001600160a01b03169190614315565b6000806000614ac88585615557565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150869060480160405160208183030381529060405280519060200120604051602001614b6f9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527efb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691614bed9190615d55565b6000604051808303816000865af19150503d8060008114614c2a576040519150601f19603f3d011682016040523d82523d6000602084013e614c2f565b606091505b5091509150818015614c59575080511580614c59575080806020019051810190614c599190615d07565b614c765760405163fb7f507960e01b815260040160405180910390fd5b5050505050565b60005b60018351614c8e9190615bbd565b81101561324357600080848381518110614caa57614caa615bd4565b602002602001015185846001614cc09190615c22565b81518110614cd057614cd0615bd4565b6020026020010151915091506000614ce88383615557565b509050600087614cf9866001615c22565b81518110614d0957614d09615bd4565b60200260200101519050600080836001600160a01b0316866001600160a01b031614614d3757826000614d3b565b6000835b91509150600060028a51614d4f9190615bbd565b8810614d5b5788614da9565b614da97f0000000000000000000000000000000000000000000000000000000000000000878c614d8c8c6002615c22565b81518110614d9c57614d9c615bd4565b6020026020010151614ab9565b9050614dd67f00000000000000000000000000000000000000000000000000000000000000008888614ab9565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614e13576020820181803683370190505b506040518563ffffffff1660e01b8152600401614e339493929190615d9d565b600060405180830381600087803b158015614e4d57600080fd5b505af1158015614e61573d6000803e3d6000fd5b5050505060018801975050505050505050614c80565b604080516000808252602082019092526001600160a01b038416908390604051614ea19190615d55565b60006040518083038185875af1925050503d8060008114614ede576040519150601f19603f3d011682016040523d82523d6000602084013e614ee3565b606091505b505090508061436757604051630a21602360e41b815260040160405180910390fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691614f619190615d55565b6000604051808303816000865af19150503d8060008114614f9e576040519150601f19603f3d011682016040523d82523d6000602084013e614fa3565b606091505b5091509150818015614fcd575080511580614fcd575080806020019051810190614fcd9190615d07565b614c7657604051634628e31d60e11b815260040160405180910390fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161504e9190615d55565b6000604051808303816000865af19150503d806000811461508b576040519150601f19603f3d011682016040523d82523d6000602084013e615090565b606091505b50915091508180156150ba5750805115806150ba5750808060200190518101906150ba9190615d07565b6150d75760405163f405907160e01b815260040160405180910390fd5b505050505050565b60008060006150ee8585615557565b50905060006150fe878787614ab9565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015615141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151659190615de1565b506001600160701b031691506001600160701b03169150836001600160a01b0316886001600160a01b03161461519c57808261519f565b81815b909a909950975050505050505050565b60005b600183516151c09190615bbd565b811015614367576000808483815181106151dc576151dc615bd4565b6020026020010151858460016151f29190615c22565b8151811061520257615202615bd4565b602002602001015191509150600061521a8383615557565b509050600061524a7f00000000000000000000000000000000000000000000000000000000000000008585614ab9565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015615290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152b49190615de1565b506001600160701b031691506001600160701b03169150600080876001600160a01b03168a6001600160a01b0316146152ee5782846152f1565b83835b6040516370a0823160e01b81526001600160a01b038a811660048301529294509092506000918c16906370a0823190602401602060405180830381865afa158015615340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153649190615bea565b90506153708382615bbd565b965061537d878484612beb565b95505050505050600080856001600160a01b0316886001600160a01b0316146153a8578260006153ac565b6000835b91509150600060028c516153c09190615bbd565b8a106153cc578a6153fd565b6153fd7f0000000000000000000000000000000000000000000000000000000000000000898e614d8c8e6002615c22565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f9061543f9086908690869060248101615d9d565b600060405180830381600087803b15801561545957600080fd5b505af115801561546d573d6000803e3d6000fd5b5050505060018a0199505050505050505050506151b2565b60006154da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155e29092919063ffffffff16565b80519091501561436757808060200190518101906154f89190615d07565b6143675760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c4565b600080826001600160a01b0316846001600160a01b03160361558c57604051630bd969eb60e41b815260040160405180910390fd5b826001600160a01b0316846001600160a01b0316106155ac5782846155af565b83835b90925090506001600160a01b0382166155db5760405163d92e233d60e01b815260040160405180910390fd5b9250929050565b606061086a848460008585600080866001600160a01b031685876040516156099190615d55565b60006040518083038185875af1925050503d8060008114615646576040519150601f19603f3d011682016040523d82523d6000602084013e61564b565b606091505b5091509150612c7a87838387606083156156c65782516000036156bf576001600160a01b0385163b6156bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c4565b508161086a565b61086a83838151156156db5781518083602001fd5b8060405162461bcd60e51b81526004016108c49190615e31565b634e487b7160e01b600052600160045260246000fd5b60008060006060848603121561572057600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0381168114611d1657600080fd5b803561575781615737565b919050565b60008083601f84011261576e57600080fd5b50813567ffffffffffffffff81111561578657600080fd5b6020830191508360208260051b85010111156155db57600080fd5b600080600080606085870312156157b757600080fd5b84356157c281615737565b9350602085013567ffffffffffffffff8111156157de57600080fd5b6157ea8782880161575c565b9598909750949560400135949350505050565b60008060008060008060a0878903121561581657600080fd5b863561582181615737565b95506020870135945060408701359350606087013567ffffffffffffffff81111561584b57600080fd5b61585789828a0161575c565b979a9699509497949695608090950135949350505050565b60008060008060006080868803121561588757600080fd5b853561589281615737565b945060208601359350604086013567ffffffffffffffff8111156158b557600080fd5b6158c18882890161575c565b96999598509660600135949350505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156158fc57600080fd5b8235915060208084013567ffffffffffffffff8082111561591c57600080fd5b818601915086601f83011261593057600080fd5b813581811115615942576159426158d3565b8060051b604051601f19603f83011681018181108582111715615967576159676158d3565b60405291825284820192508381018501918983111561598557600080fd5b938501935b828510156159aa5761599b8561574c565b8452938501939285019261598a565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156159f2578351835292840192918401916001016159d6565b50909695505050505050565b600080600080600060808688031215615a1657600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156158b557600080fd5b60008060008060008060a08789031215615a5457600080fd5b8635955060208701359450604087013567ffffffffffffffff811115615a7957600080fd5b615a8589828a0161575c565b9095509350506060870135615a9981615737565b80925050608087013590509295509295509295565b600080600060608486031215615ac357600080fd5b8335615ace81615737565b92506020840135615ade81615737565b929592945050506040919091013590565b600060208284031215615b0157600080fd5b8135610dd081615737565b600080600080600060808688031215615b2457600080fd5b85359450602086013567ffffffffffffffff811115615b4257600080fd5b615b4e8882890161575c565b9095509350506040860135615b6281615737565b949793965091946060013592915050565b60008060008060608587031215615b8957600080fd5b84359350602085013567ffffffffffffffff8111156157de57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015615bcf57615bcf615ba7565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215615bfc57600080fd5b5051919050565b6000816000190483118215151615615c1d57615c1d615ba7565b500290565b60008219821115615c3557615c35615ba7565b500190565b600082615c5757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615c6e57600080fd5b8151610dd081615737565b815160009082906020808601845b83811015615ca357815185529382019390820190600101615c87565b50929695505050505050565b60008184825b85811015615ce6578135615cc881615737565b6001600160a01b031683526020928301929190910190600101615cb5565b509095945050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215615d1957600080fd5b81518015158114610dd057600080fd5b60005b83811015615d44578181015183820152602001615d2c565b838111156132435750506000910152565b60008251615d67818460208701615d29565b9190910192915050565b60008151808452615d89816020860160208601615d29565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b03831660408201526080606082015260006144d46080830184615d71565b80516001600160701b038116811461575757600080fd5b600080600060608486031215615df657600080fd5b615dff84615dca565b9250615e0d60208501615dca565b9150604084015163ffffffff81168114615e2657600080fd5b809150509250925092565b602081526000610dd06020830184615d7156fea264697066735822122083ab4658679fc534503b19e0fb19d7d4e13579c66f000c0957a71c52f69b13c564736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106102815760003560e01c806385f8c2591161014f578063ad615dec116100c1578063d67b571e1161007a578063d67b571e1461079f578063e30c3978146107bf578063f0177c88146107dd578063f2fde38b146107fd578063f7a38f9a1461081d578063fd0a07ec1461083d57600080fd5b8063ad615dec146106d8578063bfc976da146106f8578063c45a01551461070b578063ca9a16ab1461073f578063d06ca61f1461075f578063d07dc71e1461077f57600080fd5b806390c8e6fc1161011357806390c8e6fc1461064c5780639203fd531461065f5780639cf689111461067f5780639d818ede14610692578063a87c98d8146106a5578063abdf018f146106c557600080fd5b806385f8c2591461059a5780638803dbee146105ba57806389db0896146105da5780638da5cb5b146105fa5780638dd950021461061857600080fd5b806359b1461d116101f3578063715018a6116101ac578063715018a6146104fd5780637256cace14610512578063767b047a1461053257806379ba5097146105525780637ba5a244146105675780638332a9631461058757600080fd5b806359b1461d1461041e5780635d616c5b14610431578063639219ac1461045157806364aff9ec1461047157806368bde41f146104915780636c770162146104dd57600080fd5b806320902a0f1161024557806320902a0f1461037857806321c2ddee1461039857806338ed1739146103ab5780634b2b38bb146103cb5780634d1d45b5146103eb5780634d5705aa146103fe57600080fd5b8063054d50d4146102c557806309d25c42146102f85780630a68f4fd1461030b57806316a806001461032b5780631f00ca741461034b57600080fd5b366102c057336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102be576102be6156f5565b005b600080fd5b3480156102d157600080fd5b506102e56102e036600461570b565b61085d565b6040519081526020015b60405180910390f35b6102be6103063660046157a1565b610872565b34801561031757600080fd5b506102be6103263660046157fd565b610a76565b34801561033757600080fd5b506102be61034636600461586f565b610bde565b34801561035757600080fd5b5061036b6103663660046158e9565b610da3565b6040516102ef91906159ba565b34801561038457600080fd5b506102be6103933660046159fe565b610dd7565b6102be6103a636600461586f565b610f0e565b3480156103b757600080fd5b5061036b6103c6366004615a3b565b611062565b3480156103d757600080fd5b506102be6103e63660046157fd565b611100565b6102be6103f936600461586f565b61123d565b34801561040a57600080fd5b506102be6104193660046157fd565b611391565b6102be61042c36600461586f565b6114ea565b34801561043d57600080fd5b5061036b61044c366004615a3b565b611635565b34801561045d57600080fd5b506102be61046c3660046157fd565b6116c0565b34801561047d57600080fd5b506102be61048c366004615aae565b611808565b34801561049d57600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ef565b3480156104e957600080fd5b506102be6104f83660046157fd565b611963565b34801561050957600080fd5b506102be611aaf565b34801561051e57600080fd5b506102be61052d366004615aef565b611ac3565b34801561053e57600080fd5b506102e561054d366004615a3b565b611b4d565b34801561055e57600080fd5b506102be611c9f565b34801561057357600080fd5b506102be6105823660046157fd565b611d19565b61036b610595366004615b0c565b611e56565b3480156105a657600080fd5b506102e56105b536600461570b565b611ef0565b3480156105c657600080fd5b5061036b6105d5366004615a3b565b611efd565b3480156105e657600080fd5b506102be6105f53660046159fe565b611f86565b34801561060657600080fd5b506000546001600160a01b03166104c5565b34801561062457600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b6102e561065a366004615b0c565b612051565b34801561066b57600080fd5b506102be61067a366004615b73565b6121a1565b61036b61068d366004615b0c565b6122ab565b6102be6106a036600461586f565b612335565b3480156106b157600080fd5b506002546104c5906001600160a01b031681565b6102be6106d336600461586f565b612471565b3480156106e457600080fd5b506102e56106f336600461570b565b6125ad565b6102be61070636600461586f565b6125ba565b34801561071757600080fd5b506104c57f000000000000000000000000000000000000000000000000000000000000000081565b34801561074b57600080fd5b506102e561075a366004615a3b565b612705565b34801561076b57600080fd5b5061036b61077a3660046158e9565b6127f3565b34801561078b57600080fd5b506102be61079a3660046159fe565b612820565b3480156107ab57600080fd5b5061036b6107ba366004615a3b565b6128a8565b3480156107cb57600080fd5b506001546001600160a01b03166104c5565b3480156107e957600080fd5b506102be6107f83660046159fe565b612931565b34801561080957600080fd5b506102be610818366004615aef565b6129d2565b34801561082957600080fd5b506102be6108383660046159fe565b612a43565b34801561084957600080fd5b506102be6108583660046159fe565b612b11565b600061086a848484612beb565b949350505050565b60026003540361089557604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156108cd5760405160016238016d60e11b03198152600481018290524260248201526044015b60405180910390fd5b838360028110156108f1576040516320db826760e01b815260040160405180910390fd5b61092b878787610902600182615bbd565b81811061091157610911615bd4565b90506020020160208101906109269190615aef565b612c85565b6000868661093a600182615bbd565b81811061094957610949615bd4565b905060200201602081019061095e9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190615bea565b6040516305eff7ef60e21b81523360048201529091506000906001600160a01b038b16906317bfdfbc906024016020604051808303816000875af1158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190615bea565b9050610a4a818a8a30612d32565b506000610a578484613106565b9050610a64848c8361317f565b50506001600355505050505050505050565b600260035403610a9957604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610acc5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610af0576040516320db826760e01b815260040160405180910390fd5b610b01898787610902600182615bbd565b60008686610b10600182615bbd565b818110610b1f57610b1f615bd4565b9050602002016020810190610b349190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba29190615bea565b9050610bb18a8a8a8a30613249565b506000610bbe8383613106565b9050610bcb838d83613458565b5050600160035550505050505050505050565b600260035403610c0157604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610c345760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610c58576040516320db826760e01b815260040160405180910390fd5b610c69888787610902600182615bbd565b60008686610c78600182615bbd565b818110610c8757610c87615bd4565b9050602002016020810190610c9c9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190615bea565b6040516305eff7ef60e21b81523360048201529091506000906001600160a01b038c16906317bfdfbc906024016020604051808303816000875af1158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a9190615bea565b9050610d89818b8b8b30613249565b506000610d968484613106565b9050610bcb848d8361317f565b6060610dd07f0000000000000000000000000000000000000000000000000000000000000000848461351c565b9392505050565b600260035403610dfa57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610e2d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610e51576040516320db826760e01b815260040160405180910390fd5b47610e6189898989306001613677565b50476000610e6f8383615bbd565b905089811015610e9c5760405163a9c7376b60e01b815260048101829052602481018b90526044016108c4565b60025460405163e597461960e01b81523360048201526001600160a01b039091169063e59746199083906024015b6000604051808303818588803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505060016003555050505050505050505050505050565b600260035403610f3157604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015610f645760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015610f88576040516320db826760e01b815260040160405180910390fd5b610f99888787610902600182615bbd565b60008686610fa8600182615bbd565b818110610fb757610fb7615bd4565b9050602002016020810190610fcc9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190615bea565b905061104889898930612d32565b5060006110558383613106565b9050610a64838c83613458565b606060026003540361108757604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156110ba5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156110de576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6000613c6e565b60016003559a9950505050505050505050565b60026003540361112357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156111565760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561117a576040516320db826760e01b815260040160405180910390fd5b61118b898787610902600182615bbd565b6000868661119a600182615bbd565b8181106111a9576111a9615bd4565b90506020020160208101906111be9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190615bea565b9050610bb18a8a8a8a306000613c6e565b60026003540361126057604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156112935760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156112b7576040516320db826760e01b815260040160405180910390fd5b6112c8888787610902600182615bbd565b600086866112d7600182615bbd565b8181106112e6576112e6615bd4565b90506020020160208101906112fb9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190615bea565b905061137789898930612d32565b5060006113848383613106565b9050610a64838c8361317f565b6002600354036113b457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156113e75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561140b576040516320db826760e01b815260040160405180910390fd5b61141c898787610902600182615bbd565b6000868661142b600182615bbd565b81811061143a5761143a615bd4565b905060200201602081019061144f9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd9190615bea565b90506114ce8a8a8a8a306001613c6e565b5060006114dd83838c30613efb565b9050610bcb838d8361317f565b60026003540361150d57604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156115405760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015611564576040516320db826760e01b815260040160405180910390fd5b611575888787610902600182615bbd565b60008686611584600182615bbd565b81811061159357611593615bd4565b90506020020160208101906115a89190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116169190615bea565b9050611626898989306001613fac565b50600061105583838c30613efb565b606060026003540361165a57604051638aaffc5f60e01b815260040160405180910390fd5b6002600355814281101561168d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156116b1576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6000613677565b6002600354036116e357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156117165760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561173a576040516320db826760e01b815260040160405180910390fd5b61174b898787610902600182615bbd565b6000868661175a600182615bbd565b81811061176957611769615bd4565b905060200201602081019061177e9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190615bea565b90506117fb8a8a8a8a30613249565b5060006114dd8383613106565b6118106142bb565b60026003540361183357604051638aaffc5f60e01b815260040160405180910390fd5b60026003556001600160a01b03821661185f5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156118a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ca9190615bea565b9050808211156118f75760405163cf47918160e01b815260048101839052602481018290526044016108c4565b61190b6001600160a01b0385168484614315565b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161195091815260200190565b60405180910390a3505060016003555050565b60026003540361198657604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156119b95760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156119dd576040516320db826760e01b815260040160405180910390fd5b6119ee898787610902600182615bbd565b600086866119fd600182615bbd565b818110611a0c57611a0c615bd4565b9050602002016020810190611a219190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8f9190615bea565b9050611aa08a8a8a8a306001613c6e565b506000610bbe83838c30613efb565b611ab76142bb565b611ac1600061436c565b565b611acb6142bb565b6001600160a01b038116611af25760405163d92e233d60e01b815260040160405180910390fd5b611afb81614385565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f3b7bd5f093220d445620b70570146c9dafb968654b4d2cd5c0bbdc2cfea35e6290600090a35050565b6000600260035403611b7257604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611ba55760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611bc9576040516320db826760e01b815260040160405180910390fd5b60008888611bd8600182615bbd565b818110611be757611be7615bd4565b9050602002016020810190611bfc9190615aef565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c9190615bea565b9050611c7d8c8c8c8c8c6001613c6e565b50611c8a82828d8b613efb565b60016003559c9b505050505050505050505050565b60015433906001600160a01b03168114611d0d5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016108c4565b611d168161436c565b50565b600260035403611d3c57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015611d6f5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015611d93576040516320db826760e01b815260040160405180910390fd5b611da4898787610902600182615bbd565b60008686611db3600182615bbd565b818110611dc257611dc2615bd4565b9050602002016020810190611dd79190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e459190615bea565b90506117fb8a8a8a8a306000613c6e565b6060600260035403611e7b57604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611eae5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611ed2576040516320db826760e01b815260040160405180910390fd5b611ede89898989612d32565b60016003559998505050505050505050565b600061086a84848461443f565b6060600260035403611f2257604051638aaffc5f60e01b815260040160405180910390fd5b60026003558142811015611f555760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015611f79576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a613249565b600260035403611fa957604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015611fdc5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612000576040516320db826760e01b815260040160405180910390fd5b4761201089898989306000613677565b5047600061201e8383615bbd565b60025460405163e597461960e01b81523360048201529192506001600160a01b03169063e5974619908390602401610eca565b600060026003540361207657604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156120a95760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b858560028110156120cd576040516320db826760e01b815260040160405180910390fd5b600088886120dc600182615bbd565b8181106120eb576120eb615bd4565b90506020020160208101906121009190615aef565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190615bea565b90506121808b8b8b8b6001613fac565b5061218d82828d8b613efb565b60016003559b9a5050505050505050505050565b6002600354036121c457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156121f75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561221b576040516320db826760e01b815260040160405180910390fd5b6002546040516305eff7ef60e21b815233600482015247916000916001600160a01b03909116906317bfdfbc906024016020604051808303816000875af115801561226a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228e9190615bea565b905061229d818a8a8a306144de565b5047600061201e8483615bbd565b60606002600354036122d057604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156123035760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612327576040516320db826760e01b815260040160405180910390fd5b611ede898989896000613fac565b60026003540361235857604051638aaffc5f60e01b815260040160405180910390fd5b6002600355804281101561238b5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156123af576040516320db826760e01b815260040160405180910390fd5b6123c0888787610902600182615bbd565b600086866123cf600182615bbd565b8181106123de576123de615bd4565b90506020020160208101906123f39190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561243d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124619190615bea565b9050611377898989306000613fac565b60026003540361249457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156124c75760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156124eb576040516320db826760e01b815260040160405180910390fd5b6124fc888787610902600182615bbd565b6000868661250b600182615bbd565b81811061251a5761251a615bd4565b905060200201602081019061252f9190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190615bea565b9050611048898989306000613fac565b600061086a8484846147b4565b6002600354036125dd57604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156126105760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612634576040516320db826760e01b815260040160405180910390fd5b612645888787610902600182615bbd565b60008686612654600182615bbd565b81811061266357612663615bd4565b90506020020160208101906126789190615aef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156126c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e69190615bea565b90506126f6898989306001613fac565b50600061138483838c30613efb565b600060026003540361272a57604051638aaffc5f60e01b815260040160405180910390fd5b6002600355814281101561275d5760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612781576040516320db826760e01b815260040160405180910390fd5b6001600160a01b0386163161279b8b8b8b8b8b6001613677565b506001600160a01b038716316127b18282615bbd565b95508a8610156127de5760405163a9c7376b60e01b815260048101879052602481018c90526044016108c4565b50506001600355509198975050505050505050565b6060610dd07f00000000000000000000000000000000000000000000000000000000000000008484614815565b60026003540361284357604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156128765760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b8383600281101561289a576040516320db826760e01b815260040160405180910390fd5b4761201089898989306144de565b60606002600354036128cd57604051638aaffc5f60e01b815260040160405180910390fd5b600260035581428110156129005760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b85856002811015612924576040516320db826760e01b815260040160405180910390fd5b6110ed8a8a8a8a8a6144de565b60026003540361295457604051638aaffc5f60e01b815260040160405180910390fd5b600260035580428110156129875760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b838360028110156129ab576040516320db826760e01b815260040160405180910390fd5b476129b989898989306144de565b504760006129c78383615bbd565b9050610a648161494f565b6129da6142bb565b600180546001600160a01b0383166001600160a01b03199091168117909155612a0b6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600260035403612a6657604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015612a995760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612abd576040516320db826760e01b815260040160405180910390fd5b47612acd89898989306001613677565b50476000612adb8383615bbd565b905089811015612b085760405163a9c7376b60e01b815260048101829052602481018b90526044016108c4565b610a648161494f565b600260035403612b3457604051638aaffc5f60e01b815260040160405180910390fd5b60026003558042811015612b675760405160016238016d60e11b03198152600481018290524260248201526044016108c4565b83836002811015612b8b576040516320db826760e01b815260040160405180910390fd5b476129b989898989306000613677565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600083600003612c0e5760405163098fb56160e01b815260040160405180910390fd5b821580612c19575081155b15612c375760405163bb55fd2760e01b815260040160405180910390fd5b6000612c45856126f7615c03565b90506000612c538483615c03565b9050600082612c6487612710615c03565b612c6e9190615c22565b9050612c7a8183615c3a565b979650505050505050565b612c8e82614385565b806001600160a01b0316826001600160a01b0316636f307dc36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfc9190615c5c565b6001600160a01b031614612d2e57604051633179cb1b60e01b81526001600160a01b03821660048201526024016108c4565b5050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684846000818110612d7157612d71615bd4565b9050602002016020810190612d869190615aef565b6001600160a01b031614612e09577f000000000000000000000000000000000000000000000000000000000000000084846000818110612dc857612dc8615bd4565b9050602002016020810190612ddd9190615aef565b6040516306c9abc360e51b81526001600160a01b039283166004820152911660248201526044016108c4565b612e677f00000000000000000000000000000000000000000000000000000000000000008686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b90503481600081518110612e7d57612e7d615bd4565b60200260200101511115612ecb5780600081518110612e9e57612e9e615bd4565b602002602001015134604051634c67496b60e01b81526004016108c4929190918252602082015260400190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db082600081518110612f0d57612f0d615bd4565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f4057600080fd5b505af1158015612f54573d6000803e3d6000fd5b50505050506130167f0000000000000000000000000000000000000000000000000000000000000000612ff67f000000000000000000000000000000000000000000000000000000000000000087876000818110612fb457612fb4615bd4565b9050602002016020810190612fc99190615aef565b88886001818110612fdc57612fdc615bd4565b9050602002016020810190612ff19190615aef565b614ab9565b8360008151811061300957613009615bd4565b6020026020010151614b91565b61305581858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c7d915050565b8060008151811061306857613068615bd4565b60200260200101513411156130a6576130a6338260008151811061308e5761308e615bd4565b6020026020010151346130a19190615bbd565b614e77565b806040516130b49190615c79565b604051809103902084846040516130cc929190615caf565b6040519081900381209033907fd915ae718505164a3760797139ea5eb1916b38e2345ce693e42b4c66d03185f790600090a4949350505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa15801561314f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131739190615bea565b905061086a8382615bbd565b61318b83836000614f05565b613196838383614f05565b6040516304c11f0360e31b8152336004820152602481018290526000906001600160a01b03841690632608f818906044016020604051808303816000875af11580156131e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320a9190615bea565b905080156132435760405163bf1ec74d60e01b81523360048201526001600160a01b0384166024820152604481018290526064016108c4565b50505050565b60606132a97f00000000000000000000000000000000000000000000000000000000000000008786868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b905084816000815181106132bf576132bf615bd4565b6020026020010151111561330d57806000815181106132e0576132e0615bd4565b60200260200101518560405163073dfe8160e01b81526004016108c4929190918252602082015260400190565b6133b88484600081811061332357613323615bd4565b90506020020160208101906133389190615aef565b336133987f00000000000000000000000000000000000000000000000000000000000000008888600081811061337057613370615bd4565b90506020020160208101906133859190615aef565b89896001818110612fdc57612fdc615bd4565b846000815181106133ab576133ab615bd4565b6020026020010151614fea565b6133f781858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250614c7d915050565b806040516134059190615c79565b6040518091039020848460405161341d929190615caf565b6040519081900381209033907fe3466e1395ff69c1cf0afa58afcf34fe012461c9c1c51b9fbcffd27abc2c9f0d90600090a495945050505050565b61346483836000614f05565b61346f838383614f05565b6040516323323e0360e01b8152336004820152602481018290526000906001600160a01b038416906323323e03906044016020604051808303816000875af11580156134bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e39190615bea565b9050801561324357604051630980ff1960e11b81523360048201526001600160a01b0384166024820152604481018290526064016108c4565b60606001825111613540576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff81111561355a5761355a6158d3565b604051908082528060200260200182016040528015613583578160200160208202803683370190505b5090508281600183516135969190615bbd565b815181106135a6576135a6615bd4565b6020026020010181815250506000600183516135c29190615bbd565b90505b801561366f5760008061361587866135de600187615bbd565b815181106135ee576135ee615bd4565b602002602001015187868151811061360857613608615bd4565b60200260200101516150df565b9150915061363d84848151811061362e5761362e615bd4565b6020026020010151838361443f565b84613649600186615bbd565b8151811061365957613659615bd4565b60209081029190910101525050600019016135c5565b509392505050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856136b0600182615bbd565b8181106136bf576136bf615bd4565b90506020020160208101906136d49190615aef565b6001600160a01b03161461371f577f00000000000000000000000000000000000000000000000000000000000000008585613710600182615bbd565b818110612dc857612dc8615bd4565b60008083600181111561373457613734615cf1565b0361391e576137977f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b91508682600184516137a99190615bbd565b815181106137b9576137b9615bd4565b602002602001015110156138135781600183516137d69190615bbd565b815181106137e6576137e6615bd4565b6020026020010151876040516304ffe56760e21b81526004016108c4929190918252602082015260400190565b6138b18686600081811061382957613829615bd4565b905060200201602081019061383e9190615aef565b3361389e7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061387657613876615bd4565b905060200201602081019061388b9190615aef565b8b8b6001818110612fdc57612fdc615bd4565b856000815181106133ab576133ab615bd4565b6138f082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614c7d915050565b81600183516138ff9190615bbd565b8151811061390f5761390f615bd4565b60200260200101519050613b16565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a99190615bea565b9050613a3c878760008181106139c1576139c1615bd4565b90506020020160208101906139d69190615aef565b33613a367f00000000000000000000000000000000000000000000000000000000000000008b8b6000818110613a0e57613a0e615bd4565b9050602002016020810190613a239190615aef565b8c8c6001818110612fdc57612fdc615bd4565b8c614fea565b613a7a8787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506151af915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b059190615bea565b9050613b118282615bbd565b925050505b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015613b7857600080fd5b505af1158015613b8c573d6000803e3d6000fd5b505050506001600160a01b0384163014613baa57613baa8482614e77565b6000836001811115613bbe57613bbe615cf1565b03613c205781604051613bd19190615c79565b60405180910390208686604051613be9929190615caf565b6040519081900381209033907f45ab08259ee5e98858bfa51e8a42d8f236ab50b3ee90baba6b07e955f2a5be0d90600090a4613c63565b8585604051613c30929190615caf565b6040519081900381209033907fc89d4f51067ab4d2e150bc5d21eb14bc9a7b162cefceefcdd9e60f2a2aaf046b90600090a35b509695505050505050565b60606000613ca97f000000000000000000000000000000000000000000000000000000000000000087876000818110612fb457612fb4615bd4565b90506000836001811115613cbf57613cbf615cf1565b03613e3d57613d227f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b9150868260018451613d349190615bbd565b81518110613d4457613d44615bd4565b60200260200101511015613d615781600183516137d69190615bbd565b613da186866000818110613d7757613d77615bd4565b9050602002016020810190613d8c9190615aef565b3383856000815181106133ab576133ab615bd4565b613de082878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250614c7d915050565b81604051613dee9190615c79565b60405180910390208686604051613e06929190615caf565b6040519081900381209033907fe3466e1395ff69c1cf0afa58afcf34fe012461c9c1c51b9fbcffd27abc2c9f0d90600090a4613c63565b613e7086866000818110613e5357613e53615bd4565b9050602002016020810190613e689190615aef565b33838b614fea565b613eae8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506151af915050565b8585604051613ebe929190615caf565b6040519081900381209033907f1c0e4e880c96a60f75a8441625b27804db4aaeeeb1dee519a3ef4ea697156bce90600090a3509695505050505050565b6040516370a0823160e01b81526001600160a01b03828116600483015260009182918716906370a0823190602401602060405180830381865afa158015613f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6a9190615bea565b9050613f768582615bbd565b915083821015613fa35760405163a9c7376b60e01b815260048101839052602481018590526044016108c4565b50949350505050565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381168686600081613fea57613fea615bd4565b9050602002016020810190613fff9190615aef565b6001600160a01b031614614021578086866000818110612dc857612dc8615bd4565b806001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561405c57600080fd5b505af1158015614070573d6000803e3d6000fd5b50505050506140de816140d87f0000000000000000000000000000000000000000000000000000000000000000898960008181106140b0576140b0615bd4565b90506020020160208101906140c59190615aef565b8a8a6001818110612fdc57612fdc615bd4565b34614b91565b60008360018111156140f2576140f2615cf1565b03614230576141557f00000000000000000000000000000000000000000000000000000000000000003488888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061481592505050565b91508682600184516141679190615bbd565b8151811061417757614177615bd4565b602002602001015110156141945781600183516137d69190615bbd565b6141d382878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250614c7d915050565b816040516141e19190615c79565b604051809103902086866040516141f9929190615caf565b6040519081900381209033907fd915ae718505164a3760797139ea5eb1916b38e2345ce693e42b4c66d03185f790600090a46142b1565b61426e8686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508892506151af915050565b858560405161427e929190615caf565b6040519081900381209033907fb9f737c4359d1238f35c1e5e0dd7425e3e3211a434a09676b4459fa07a26b57990600090a35b5095945050505050565b6000546001600160a01b03163314611ac15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c4565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052614367908490615485565b505050565b600180546001600160a01b0319169055611d1681612b9b565b604051638e8f294b60e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690638e8f294b90602401602060405180830381865afa1580156143f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144149190615d07565b905080612d2e576040516349660aeb60e01b81526001600160a01b03831660048201526024016108c4565b600083600003614462576040516342301c2360e01b815260040160405180910390fd5b82158061446d575081155b1561448b5760405163bb55fd2760e01b815260040160405180910390fd5b60006144978585615c03565b6144a390612710615c03565b905060006144b18685615bbd565b6144bd906126f7615c03565b90506144c98183615c3a565b6144d4906001615c22565b9695505050505050565b60606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168484614517600182615bbd565b81811061452657614526615bd4565b905060200201602081019061453b9190615aef565b6001600160a01b031614614577577f00000000000000000000000000000000000000000000000000000000000000008484613710600182615bbd565b6145d57f00000000000000000000000000000000000000000000000000000000000000008786868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061351c92505050565b905084816000815181106145eb576145eb615bd4565b602002602001015111156146185780600182516146089190615bbd565b815181106132e0576132e0615bd4565b61462e8484600081811061332357613323615bd4565b61466d81858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614c7d915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82600184516146ab9190615bbd565b815181106146bb576146bb615bd4565b60200260200101516040518263ffffffff1660e01b81526004016146e191815260200190565b600060405180830381600087803b1580156146fb57600080fd5b505af115801561470f573d6000803e3d6000fd5b505050506001600160a01b0382163014614753576147538282600184516147369190615bbd565b8151811061474657614746615bd4565b6020026020010151614e77565b806040516147619190615c79565b60405180910390208484604051614779929190615caf565b6040519081900381209033907f45ab08259ee5e98858bfa51e8a42d8f236ab50b3ee90baba6b07e955f2a5be0d90600090a495945050505050565b6000836000036147d75760405163098fb56160e01b815260040160405180910390fd5b8215806147e2575081155b156148005760405163bb55fd2760e01b815260040160405180910390fd5b8261480b8386615c03565b61086a9190615c3a565b60606001825111614839576040516320db826760e01b815260040160405180910390fd5b815167ffffffffffffffff811115614853576148536158d3565b60405190808252806020026020018201604052801561487c578160200160208202803683370190505b509050828160008151811061489357614893615bd4565b60200260200101818152505060005b600183516148b09190615bbd565b81101561366f576000806148f6878685815181106148d0576148d0615bd4565b6020026020010151878660016148e69190615c22565b8151811061360857613608615bd4565b9150915061491e84848151811061490f5761490f615bd4565b60200260200101518383612beb565b8461492a856001615c22565b8151811061493a5761493a615bd4565b602090810291909101015250506001016148a2565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015614998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149bc9190615bea565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316631249c58b836040518263ffffffff1660e01b81526004016000604051808303818588803b158015614a0e57600080fd5b505af1158015614a22573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015614a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a969190615bea565b905061436733614aa68484615bbd565b6002546001600160a01b03169190614315565b6000806000614ac88585615557565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b1660348201529193509150869060480160405160208183030381529060405280519060200120604051602001614b6f9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527efb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691614bed9190615d55565b6000604051808303816000865af19150503d8060008114614c2a576040519150601f19603f3d011682016040523d82523d6000602084013e614c2f565b606091505b5091509150818015614c59575080511580614c59575080806020019051810190614c599190615d07565b614c765760405163fb7f507960e01b815260040160405180910390fd5b5050505050565b60005b60018351614c8e9190615bbd565b81101561324357600080848381518110614caa57614caa615bd4565b602002602001015185846001614cc09190615c22565b81518110614cd057614cd0615bd4565b6020026020010151915091506000614ce88383615557565b509050600087614cf9866001615c22565b81518110614d0957614d09615bd4565b60200260200101519050600080836001600160a01b0316866001600160a01b031614614d3757826000614d3b565b6000835b91509150600060028a51614d4f9190615bbd565b8810614d5b5788614da9565b614da97f0000000000000000000000000000000000000000000000000000000000000000878c614d8c8c6002615c22565b81518110614d9c57614d9c615bd4565b6020026020010151614ab9565b9050614dd67f00000000000000000000000000000000000000000000000000000000000000008888614ab9565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614e13576020820181803683370190505b506040518563ffffffff1660e01b8152600401614e339493929190615d9d565b600060405180830381600087803b158015614e4d57600080fd5b505af1158015614e61573d6000803e3d6000fd5b5050505060018801975050505050505050614c80565b604080516000808252602082019092526001600160a01b038416908390604051614ea19190615d55565b60006040518083038185875af1925050503d8060008114614ede576040519150601f19603f3d011682016040523d82523d6000602084013e614ee3565b606091505b505090508061436757604051630a21602360e41b815260040160405180910390fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691614f619190615d55565b6000604051808303816000865af19150503d8060008114614f9e576040519150601f19603f3d011682016040523d82523d6000602084013e614fa3565b606091505b5091509150818015614fcd575080511580614fcd575080806020019051810190614fcd9190615d07565b614c7657604051634628e31d60e11b815260040160405180910390fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161504e9190615d55565b6000604051808303816000865af19150503d806000811461508b576040519150601f19603f3d011682016040523d82523d6000602084013e615090565b606091505b50915091508180156150ba5750805115806150ba5750808060200190518101906150ba9190615d07565b6150d75760405163f405907160e01b815260040160405180910390fd5b505050505050565b60008060006150ee8585615557565b50905060006150fe878787614ab9565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015615141573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151659190615de1565b506001600160701b031691506001600160701b03169150836001600160a01b0316886001600160a01b03161461519c57808261519f565b81815b909a909950975050505050505050565b60005b600183516151c09190615bbd565b811015614367576000808483815181106151dc576151dc615bd4565b6020026020010151858460016151f29190615c22565b8151811061520257615202615bd4565b602002602001015191509150600061521a8383615557565b509050600061524a7f00000000000000000000000000000000000000000000000000000000000000008585614ab9565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015615290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152b49190615de1565b506001600160701b031691506001600160701b03169150600080876001600160a01b03168a6001600160a01b0316146152ee5782846152f1565b83835b6040516370a0823160e01b81526001600160a01b038a811660048301529294509092506000918c16906370a0823190602401602060405180830381865afa158015615340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153649190615bea565b90506153708382615bbd565b965061537d878484612beb565b95505050505050600080856001600160a01b0316886001600160a01b0316146153a8578260006153ac565b6000835b91509150600060028c516153c09190615bbd565b8a106153cc578a6153fd565b6153fd7f0000000000000000000000000000000000000000000000000000000000000000898e614d8c8e6002615c22565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f9061543f9086908690869060248101615d9d565b600060405180830381600087803b15801561545957600080fd5b505af115801561546d573d6000803e3d6000fd5b5050505060018a0199505050505050505050506151b2565b60006154da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155e29092919063ffffffff16565b80519091501561436757808060200190518101906154f89190615d07565b6143675760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108c4565b600080826001600160a01b0316846001600160a01b03160361558c57604051630bd969eb60e41b815260040160405180910390fd5b826001600160a01b0316846001600160a01b0316106155ac5782846155af565b83835b90925090506001600160a01b0382166155db5760405163d92e233d60e01b815260040160405180910390fd5b9250929050565b606061086a848460008585600080866001600160a01b031685876040516156099190615d55565b60006040518083038185875af1925050503d8060008114615646576040519150601f19603f3d011682016040523d82523d6000602084013e61564b565b606091505b5091509150612c7a87838387606083156156c65782516000036156bf576001600160a01b0385163b6156bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108c4565b508161086a565b61086a83838151156156db5781518083602001fd5b8060405162461bcd60e51b81526004016108c49190615e31565b634e487b7160e01b600052600160045260246000fd5b60008060006060848603121561572057600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0381168114611d1657600080fd5b803561575781615737565b919050565b60008083601f84011261576e57600080fd5b50813567ffffffffffffffff81111561578657600080fd5b6020830191508360208260051b85010111156155db57600080fd5b600080600080606085870312156157b757600080fd5b84356157c281615737565b9350602085013567ffffffffffffffff8111156157de57600080fd5b6157ea8782880161575c565b9598909750949560400135949350505050565b60008060008060008060a0878903121561581657600080fd5b863561582181615737565b95506020870135945060408701359350606087013567ffffffffffffffff81111561584b57600080fd5b61585789828a0161575c565b979a9699509497949695608090950135949350505050565b60008060008060006080868803121561588757600080fd5b853561589281615737565b945060208601359350604086013567ffffffffffffffff8111156158b557600080fd5b6158c18882890161575c565b96999598509660600135949350505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156158fc57600080fd5b8235915060208084013567ffffffffffffffff8082111561591c57600080fd5b818601915086601f83011261593057600080fd5b813581811115615942576159426158d3565b8060051b604051601f19603f83011681018181108582111715615967576159676158d3565b60405291825284820192508381018501918983111561598557600080fd5b938501935b828510156159aa5761599b8561574c565b8452938501939285019261598a565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156159f2578351835292840192918401916001016159d6565b50909695505050505050565b600080600080600060808688031215615a1657600080fd5b8535945060208601359350604086013567ffffffffffffffff8111156158b557600080fd5b60008060008060008060a08789031215615a5457600080fd5b8635955060208701359450604087013567ffffffffffffffff811115615a7957600080fd5b615a8589828a0161575c565b9095509350506060870135615a9981615737565b80925050608087013590509295509295509295565b600080600060608486031215615ac357600080fd5b8335615ace81615737565b92506020840135615ade81615737565b929592945050506040919091013590565b600060208284031215615b0157600080fd5b8135610dd081615737565b600080600080600060808688031215615b2457600080fd5b85359450602086013567ffffffffffffffff811115615b4257600080fd5b615b4e8882890161575c565b9095509350506040860135615b6281615737565b949793965091946060013592915050565b60008060008060608587031215615b8957600080fd5b84359350602085013567ffffffffffffffff8111156157de57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015615bcf57615bcf615ba7565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215615bfc57600080fd5b5051919050565b6000816000190483118215151615615c1d57615c1d615ba7565b500290565b60008219821115615c3557615c35615ba7565b500190565b600082615c5757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615c6e57600080fd5b8151610dd081615737565b815160009082906020808601845b83811015615ca357815185529382019390820190600101615c87565b50929695505050505050565b60008184825b85811015615ce6578135615cc881615737565b6001600160a01b031683526020928301929190910190600101615cb5565b509095945050505050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215615d1957600080fd5b81518015158114610dd057600080fd5b60005b83811015615d44578181015183820152602001615d2c565b838111156132435750506000910152565b60008251615d67818460208701615d29565b9190910192915050565b60008151808452615d89816020860160208601615d29565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b03831660408201526080606082015260006144d46080830184615d71565b80516001600160701b038116811461575757600080fd5b600080600060608486031215615df657600080fd5b615dff84615dca565b9250615e0d60208501615dca565b9150604084015163ffffffff81168114615e2657600080fd5b809150509250925092565b602081526000610dd06020830184615d7156fea264697066735822122083ab4658679fc534503b19e0fb19d7d4e13579c66f000c0957a71c52f69b13c564736f6c634300080d0033",
  "devdoc": {
    "author": "0xlucian",
    "details": "For all functions that do not swap native BNB, user must approve this contract with the amount, prior the calling the swap function.",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getAmountIn(uint256,uint256,uint256)": {
        "params": {
          "amountOut": "The amount of token B after swap",
          "reserveIn": "The amount of reserves for token A before swap",
          "reserveOut": "The amount of reserves for token B after swap"
        },
        "returns": {
          "amountIn": "Required input amount of the token A*"
        }
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "params": {
          "amountIn": "The amount of token A need to swap",
          "reserveIn": "The amount of reserves for token A before swap",
          "reserveOut": "The amount of reserves for token B after swap"
        },
        "returns": {
          "amountOut": "The maximum output amount of the token B*"
        }
      },
      "getAmountsIn(uint256,address[])": {
        "params": {
          "amountOut": "amountOut The amount of the tokens needs to be as output token.",
          "path": "Array with addresses of the underlying assets to be swapped."
        }
      },
      "getAmountsOut(uint256,address[])": {
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "path": "Array with addresses of the underlying assets to be swapped."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "quote(uint256,uint256,uint256)": {
        "params": {
          "amountA": "The amount of token A",
          "reserveA": "The amount of reserves for token A before swap",
          "reserveB": "The amount of reserves for token B before swap"
        },
        "returns": {
          "amountB": "An equivalent amount of the token B*"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVBNBAddress(address)": {
        "params": {
          "_vBNBAddress": "Address of the BNB vToken to update."
        }
      },
      "swapBNBForExactTokens(uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.*",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapBNBForExactTokensAndRepay(address,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapBNBForExactTokensAndSupply(address,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapBNBForFullTokenDebtAndRepay(address,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapExactBNBForTokens(uint256,address[],address,uint256)": {
        "details": "amountIn is passed through the msg.value of the transaction",
        "params": {
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapExactBNBForTokensAndRepay(address,uint256,address[],uint256)": {
        "details": "The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive",
        "params": {
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract to repay."
        }
      },
      "swapExactBNBForTokensAndRepayAtSupportingFee(address,uint256,address[],uint256)": {
        "details": "The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered so the swap path tokens are listed first and last asset is the token we receive",
        "params": {
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract to repay."
        }
      },
      "swapExactBNBForTokensAndSupply(address,uint256,address[],uint256)": {
        "details": "The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapExactBNBForTokensAndSupplyAtSupportingFee(address,uint256,address[],uint256)": {
        "details": "The amount to be swapped is obtained from the msg.value, since we are swapping BNBAddresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapExactBNBForTokensAtSupportingFee(uint256,address[],address,uint256)": {
        "details": "amountIn is passed through the msg.value of the transaction",
        "params": {
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountIn": "The address of the vToken contract to repay.",
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapExactTokensForBNBAndRepay(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapExactTokensForBNBAndRepayAtSupportingFee(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapExactTokensForBNBAndSupply(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapExactTokensForBNBAndSupplyAtSupportingFee(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapExactTokensForBNBAtSupportingFee(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountIn": "The address of the vToken contract to repay.",
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountIn": "The address of the vToken contract to repay.",
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapExactTokensForTokensAndRepay(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract to repay."
        }
      },
      "swapExactTokensForTokensAndRepayAtSupportingFee(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive (and repay)",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract to repay."
        }
      },
      "swapExactTokensForTokensAndSupply(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapExactTokensForTokensAndSupplyAtSupportingFee(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receive",
        "params": {
          "amountIn": "The amount of tokens to swap.",
          "amountOutMin": "Minimum amount of tokens to receive.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapExactTokensForTokensAtSupportingFee(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountIn": "The address of the vToken contract to repay.",
          "amountOutMin": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.*",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapTokensForExactBNBAndRepay(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapTokensForExactBNBAndSupply(uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "details": "msg.sender should have already given the router an allowance of at least amountIn on the input token.",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.*",
          "path": "Array with addresses of the underlying assets to be swapped",
          "to": "Recipient of the output tokens."
        }
      },
      "swapTokensForExactTokensAndRepay(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapTokensForExactTokensAndSupply(address,uint256,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "amountOut": "The amount of the tokens needs to be as output token.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "swapTokensForFullBNBDebtAndRepay(uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped"
        }
      },
      "swapTokensForFullTokenDebtAndRepay(address,uint256,address[],uint256)": {
        "details": "Addresses of underlying assets should be ordered that first asset is the token we are swapping and second asset is the token we receiveIn case of swapping native BNB the first asset in path array should be the wBNB address",
        "params": {
          "amountInMax": "The maximum amount of input tokens that can be taken for the transaction not to revert.",
          "deadline": "Unix timestamp after which the transaction will revert.",
          "path": "Array with addresses of the underlying assets to be swapped",
          "vTokenAddress": "The address of the vToken contract for supplying assets."
        }
      },
      "sweepToken(address,address,uint256)": {
        "custom:access": "Only Governance",
        "params": {
          "sweepAmount": "The ampunt of the tokens to sweep",
          "to": "Recipient of the output tokens.",
          "token": "The address of the ERC-20 token to sweep"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_status": {
        "details": "Guard variable for re-entrancy checks"
      }
    },
    "title": "Venus's Pancake Swap Integration Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ExcessiveInputAmount(uint256,uint256)": [
        {
          "notice": "Error thrown when amount is above the msg.value(amountMax)"
        }
      ],
      "IdenticalAddresses()": [
        {
          "notice": "Error thrown if two token addresses are identical"
        }
      ],
      "InputAmountAboveMaximum(uint256,uint256)": [
        {
          "notice": "Error thrown when the amount In is above the amount in maximum"
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "notice": "Error thrown when swapRouter's balance is less than sweep amount"
        }
      ],
      "InsufficientInputAmount()": [
        {
          "notice": "Error thrown where the input amount parameter for a token is 0"
        }
      ],
      "InsufficientLiquidity()": [
        {
          "notice": "Error thrown when the given reserves are equal to 0"
        }
      ],
      "InsufficientOutputAmount()": [
        {
          "notice": "Error thrown when the amount out passed is 0"
        }
      ],
      "InvalidPath()": [
        {
          "notice": "Error thrown when the trade path[] parameter consists of only 1 token (i.e. path.length<2)"
        }
      ],
      "OutputAmountBelowMinimum(uint256,uint256)": [
        {
          "notice": "Error thrown when the amount received from a trade is below the minimum"
        }
      ],
      "ReentrantCheck()": [
        {
          "notice": "Error thrown when reentrant check fails"
        }
      ],
      "RepayError(address,address,uint256)": [
        {
          "notice": "Error indicating that repaying to given market failed."
        }
      ],
      "SafeApproveFailed()": [
        {
          "notice": "Error thrown when safeApprove failed"
        }
      ],
      "SafeTransferBNBFailed()": [
        {
          "notice": "Error thrown when safeTransferBNB failed"
        }
      ],
      "SafeTransferFailed()": [
        {
          "notice": "Error thrown when safeTransfer failed"
        }
      ],
      "SafeTransferFromFailed()": [
        {
          "notice": "Error thrown when transferFrom failed"
        }
      ],
      "SupplyError(address,address,uint256)": [
        {
          "notice": "Error indicating that suplying to a given market failed."
        }
      ],
      "SwapAmountLessThanAmountOutMin(uint256,uint256)": [
        {
          "notice": "Error thrown when swapamount is less than the amountOutmin"
        }
      ],
      "SwapDeadlineExpire(uint256,uint256)": [
        {
          "notice": "Error thrown when deadline for swap has expired"
        }
      ],
      "VTokenNotListed(address)": [
        {
          "notice": "Error thrown when invalid vToken address is passed to swap router"
        }
      ],
      "VTokenUnderlyingInvalid(address)": [
        {
          "notice": "Error thrown when invalid underlying is passed as per given vToken"
        }
      ],
      "WrongAddress(address,address)": [
        {
          "notice": "Error indicating wBNB address passed is not the expected one."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error thrown if a zero address is passed"
        }
      ]
    },
    "events": {
      "SwapBnbForTokens(address,address[],uint256[])": {
        "notice": "This event is emitted whenever a successful swap (BNB -> token) occurs"
      },
      "SwapBnbForTokensAtSupportingFee(address,address[])": {
        "notice": "This event is emitted whenever a successful swap (BNB -> token) occurs"
      },
      "SwapTokensForBnb(address,address[],uint256[])": {
        "notice": "This event is emitted whenever a successful swap (token -> BNB) occurs"
      },
      "SwapTokensForBnbAtSupportingFee(address,address[])": {
        "notice": "This event is emitted whenever a successful swap (token -> BNB) occurs"
      },
      "SwapTokensForTokens(address,address[],uint256[])": {
        "notice": "This event is emitted whenever a successful swap (tokenA -> tokenB) occurs"
      },
      "SwapTokensForTokensAtSupportingFee(address,address[])": {
        "notice": "This event is emitted whenever a successful swap (tokenA -> tokenB) occurs"
      },
      "SweepToken(address,address,uint256)": {
        "notice": "event emitted on sweep token success"
      },
      "VBNBAddressUpdated(address,address)": {
        "notice": "event emitted on vBNBAddress update"
      }
    },
    "kind": "user",
    "methods": {
      "WBNB()": {
        "notice": "Address of WBNB contract."
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "factory()": {
        "notice": "Address of pancake swap factory contract."
      },
      "getAmountIn(uint256,uint256,uint256)": {
        "notice": "Given an output amount of an asset and pair reserves, returns a required input amount of the other asset"
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset"
      },
      "getAmountsIn(uint256,address[])": {
        "notice": "performs chained getAmountIn calculations on any number of pairs."
      },
      "getAmountsOut(uint256,address[])": {
        "notice": "performs chained getAmountOut calculations on any number of pairs."
      },
      "quote(uint256,uint256,uint256)": {
        "notice": "Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset"
      },
      "setVBNBAddress(address)": {
        "notice": "Setter for the vBNB address."
      },
      "swapBNBForExactTokens(uint256,address[],address,uint256)": {
        "notice": "Swaps an as ETH as input tokens for as exact amount of tokens as output,         along the route determined by the path. The first element of path is the input WBNB,         the last is the output as token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapBNBForExactTokensAndRepay(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for Exact tokens and repay to a Venus market"
      },
      "swapBNBForExactTokensAndSupply(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for Exact tokens and supply to a Venus market"
      },
      "swapBNBForFullTokenDebtAndRepay(address,address[],uint256)": {
        "notice": "Swap BNB for Exact tokens and repay to a Venus market"
      },
      "swapExactBNBForTokens(uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of BNB for as many output tokens as possible,         along the route determined by the path. The first element of path must be WBNB,         the last is the output token, and any intermediate elements represent         intermediate pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapExactBNBForTokensAndRepay(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for another token and repay a borrow from a Venus market"
      },
      "swapExactBNBForTokensAndRepayAtSupportingFee(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and repay a borrow from a Venus market"
      },
      "swapExactBNBForTokensAndSupply(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for another token and supply to a Venus market"
      },
      "swapExactBNBForTokensAndSupplyAtSupportingFee(address,uint256,address[],uint256)": {
        "notice": "Swap BNB for another deflationary token (a small amount of fee is deducted at the time of transfer of token) and supply to a Venus market"
      },
      "swapExactBNBForTokensAtSupportingFee(uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of ETH for as many output tokens as possible,         along the route determined by the path. The first element of path must be WBNB,         the last is the output token, and any intermediate elements represent         intermediate pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee."
      },
      "swapExactTokensForBNB(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output ETH as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapExactTokensForBNBAndRepay(uint256,uint256,address[],uint256)": {
        "notice": "Swap Exact tokens for BNB and repay to a Venus market"
      },
      "swapExactTokensForBNBAndRepayAtSupportingFee(uint256,uint256,address[],uint256)": {
        "notice": "Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and repay to a Venus market"
      },
      "swapExactTokensForBNBAndSupply(uint256,uint256,address[],uint256)": {
        "notice": "Swap Exact tokens for BNB and supply to a Venus market"
      },
      "swapExactTokensForBNBAndSupplyAtSupportingFee(uint256,uint256,address[],uint256)": {
        "notice": "Swap Exact deflationary tokens (a small amount of fee is deducted at the time of transfer of tokens) for BNB and supply to a Venus market"
      },
      "swapExactTokensForBNBAtSupportingFee(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output ETH as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee."
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapExactTokensForTokensAndRepay(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap token A for token B and repay a borrow from a Venus market"
      },
      "swapExactTokensForTokensAndRepayAtSupportingFee(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap deflationary token (a small amount of fee is deducted at the time of transfer of token) token A for token B and repay a borrow from a Venus market"
      },
      "swapExactTokensForTokensAndSupply(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap token A for token B and supply to a Venus market"
      },
      "swapExactTokensForTokensAndSupplyAtSupportingFee(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap deflationary (a small amount of fee is deducted at the time of transfer of token) token A for token B and supply to a Venus market."
      },
      "swapExactTokensForTokensAtSupportingFee(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist).         This method to swap deflationary tokens which would require supporting fee."
      },
      "swapTokensForExactBNB(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an as many amount of input tokens for as exact amount of ETH as output,         along the route determined by the path. The first element of path is the input token,         the last is the output as ETH, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapTokensForExactBNBAndRepay(uint256,uint256,address[],uint256)": {
        "notice": "Swap tokens for Exact BNB and repay to a Venus market"
      },
      "swapTokensForExactBNBAndSupply(uint256,uint256,address[],uint256)": {
        "notice": "Swap tokens for Exact BNB and supply to a Venus market"
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an as many amount of input tokens for as exact amount of tokens as output,         along the route determined by the path. The first element of path is the input token,         the last is the output token, and any intermediate elements represent intermediate         pairs to trade through (if, for example, a direct pair does not exist)."
      },
      "swapTokensForExactTokensAndRepay(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap tokens for Exact tokens and repay to a Venus market"
      },
      "swapTokensForExactTokensAndSupply(address,uint256,uint256,address[],uint256)": {
        "notice": "Swap tokens for Exact tokens and supply to a Venus market"
      },
      "swapTokensForFullBNBDebtAndRepay(uint256,address[],uint256)": {
        "notice": "Swap tokens for Exact BNB and repay to a Venus market"
      },
      "swapTokensForFullTokenDebtAndRepay(address,uint256,address[],uint256)": {
        "notice": "Swap tokens for full tokens debt and repay to a Venus market"
      },
      "sweepToken(address,address,uint256)": {
        "notice": "A public function to sweep accidental BEP-20 transfers to this contract. Tokens are sent to the address `to`, provided in input"
      }
    },
    "notice": "This contracts allows users to swap a token for another one and supply/repay with the latter.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1208,
        "contract": "contracts/Swap/SwapRouter.sol:SwapRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1321,
        "contract": "contracts/Swap/SwapRouter.sol:SwapRouter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4959,
        "contract": "contracts/Swap/SwapRouter.sol:SwapRouter",
        "label": "vBNBAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4962,
        "contract": "contracts/Swap/SwapRouter.sol:SwapRouter",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
